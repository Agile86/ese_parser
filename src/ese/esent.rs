#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals, unused)]
/* automatically generated by rust-bindgen 0.54.1 */

use  std::fmt;

impl fmt::Debug for JET_BKINFO__bindgen_ty_1{
    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
        unsafe {
            fmt.debug_struct("JET_BKINFO__bindgen_ty_1")
                .field("bklogtimeMark", &self.bklogtimeMark)
                .finish()
        }
    }
}

impl fmt::Debug for JET_BKLOGTIME__bindgen_ty_1{
    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
        unsafe {
            fmt.debug_struct("JET_BKLOGTIME__bindgen_ty_1")
                .field("__bindgen_anon_1", &self.__bindgen_anon_1)
                .finish()
        }
    }
}

impl fmt::Debug for JET_BKLOGTIME__bindgen_ty_2{
    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
        unsafe {
            fmt.debug_struct("JET_BKLOGTIME__bindgen_ty_2")
                .field("__bindgen_anon_1", &self.__bindgen_anon_1)
                .finish()
        }
    }
}

impl fmt::Debug for JET_LOGTIME__bindgen_ty_1{
    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
        unsafe {
            fmt.debug_struct("JET_LOGTIME__bindgen_ty_1")
                .field("__bindgen_anon_1", &self.__bindgen_anon_1)
                .finish()
        }
    }
}

impl fmt::Debug for JET_LOGTIME__bindgen_ty_2{
    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
        unsafe {
            fmt.debug_struct("JET_LOGTIME__bindgen_ty_2")
                .field("__bindgen_anon_1", &self.__bindgen_anon_1)
                .finish()
        }
    }
}

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const WINAPI_FAMILY_PC_APP: u32 = 2;
pub const WINAPI_FAMILY_PHONE_APP: u32 = 3;
pub const WINAPI_FAMILY_SYSTEM: u32 = 4;
pub const WINAPI_FAMILY_SERVER: u32 = 5;
pub const WINAPI_FAMILY_GAMES: u32 = 6;
pub const WINAPI_FAMILY_DESKTOP_APP: u32 = 100;
pub const WINAPI_FAMILY_APP: u32 = 2;
pub const WINAPI_FAMILY: u32 = 100;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const __SAL_H_FULL_VER: u32 = 140050727;
pub const __SPECSTRINGS_STRICT_LEVEL: u32 = 1;
pub const __drv_typeConst: u32 = 0;
pub const __drv_typeCond: u32 = 1;
pub const __drv_typeBitset: u32 = 2;
pub const __drv_typeExpr: u32 = 3;
pub const JET_VERSION: u32 = 2560;
pub const JET_wszConfigStoreReadControl: &'static [u8; 14usize] = b"CsReadControl\0";
pub const JET_bitConfigStoreReadControlInhibitRead: u32 = 1;
pub const JET_bitConfigStoreReadControlDisableAll: u32 = 2;
pub const JET_bitConfigStoreReadControlDefault: u32 = 0;
pub const JET_wszConfigStoreRelPathSysParamDefault: &'static [u8; 16usize] = b"SysParamDefault\0";
pub const JET_wszConfigStoreRelPathSysParamOverride: &'static [u8; 17usize] = b"SysParamOverride\0";
pub const JET_bitDefragmentBatchStart: u32 = 1;
pub const JET_bitDefragmentBatchStop: u32 = 2;
pub const JET_bitDefragmentAvailSpaceTreesOnly: u32 = 64;
pub const JET_bitDefragmentNoPartialMerges: u32 = 128;
pub const JET_bitDefragmentBTree: u32 = 256;
pub const JET_cbtypNull: u32 = 0;
pub const JET_cbtypFinalize: u32 = 1;
pub const JET_cbtypBeforeInsert: u32 = 2;
pub const JET_cbtypAfterInsert: u32 = 4;
pub const JET_cbtypBeforeReplace: u32 = 8;
pub const JET_cbtypAfterReplace: u32 = 16;
pub const JET_cbtypBeforeDelete: u32 = 32;
pub const JET_cbtypAfterDelete: u32 = 64;
pub const JET_cbtypUserDefinedDefaultValue: u32 = 128;
pub const JET_cbtypOnlineDefragCompleted: u32 = 256;
pub const JET_cbtypFreeCursorLS: u32 = 512;
pub const JET_cbtypFreeTableLS: u32 = 1024;
pub const JET_bitTableInfoUpdatable: u32 = 1;
pub const JET_bitTableInfoBookmark: u32 = 2;
pub const JET_bitTableInfoRollback: u32 = 4;
pub const JET_bitObjectSystem: u32 = 2147483648;
pub const JET_bitObjectTableFixedDDL: u32 = 1073741824;
pub const JET_bitObjectTableTemplate: u32 = 536870912;
pub const JET_bitObjectTableDerived: u32 = 268435456;
pub const JET_bitObjectTableNoFixedVarColumnsInDerivedTables: u32 = 67108864;
pub const cObjectInfoCols: u32 = 9;
pub const cColumnInfoCols: u32 = 14;
pub const cIndexInfoCols: u32 = 15;
pub const JET_MAX_COMPUTERNAME_LENGTH: u32 = 15;
pub const JET_bitDurableCommitCallbackLogUnavailable: u32 = 1;
pub const JET_cbBookmarkMost: u32 = 256;
pub const JET_cbNameMost: u32 = 64;
pub const JET_cbFullNameMost: u32 = 255;
pub const JET_cbColumnLVPageOverhead: u32 = 82;
pub const JET_cbLVDefaultValueMost: u32 = 255;
pub const JET_cbColumnMost: u32 = 255;
pub const JET_cbLVColumnMost: u32 = 2147483647;
pub const JET_cbKeyMost8KBytePage: u32 = 2000;
pub const JET_cbKeyMost4KBytePage: u32 = 1000;
pub const JET_cbKeyMost2KBytePage: u32 = 500;
pub const JET_cbKeyMostMin: u32 = 255;
pub const JET_cbKeyMost: u32 = 255;
pub const JET_cbLimitKeyMost: u32 = 256;
pub const JET_cbPrimaryKeyMost: u32 = 255;
pub const JET_cbSecondaryKeyMost: u32 = 255;
pub const JET_ccolKeyMost: u32 = 16;
pub const JET_ccolMost: u32 = 65248;
pub const JET_ccolFixedMost: u32 = 127;
pub const JET_ccolVarMost: u32 = 128;
pub const JET_ccolTaggedMost: u32 = 64993;
pub const JET_EventLoggingDisable: u32 = 0;
pub const JET_EventLoggingLevelMin: u32 = 1;
pub const JET_EventLoggingLevelLow: u32 = 25;
pub const JET_EventLoggingLevelMedium: u32 = 50;
pub const JET_EventLoggingLevelHigh: u32 = 75;
pub const JET_EventLoggingLevelMax: u32 = 100;
pub const JET_IOPriorityNormal: u32 = 0;
pub const JET_IOPriorityLow: u32 = 1;
pub const JET_configDefault: u32 = 1;
pub const JET_configRemoveQuotas: u32 = 2;
pub const JET_configLowDiskFootprint: u32 = 4;
pub const JET_configMediumDiskFootprint: u32 = 8;
pub const JET_configLowMemory: u32 = 16;
pub const JET_configDynamicMediumMemory: u32 = 32;
pub const JET_configLowPower: u32 = 64;
pub const JET_configSSDProfileIO: u32 = 128;
pub const JET_configRunSilent: u32 = 256;
pub const JET_configUnthrottledMemory: u32 = 512;
pub const JET_configHighConcurrencyScaling: u32 = 1024;
pub const JET_paramSystemPath: u32 = 0;
pub const JET_paramTempPath: u32 = 1;
pub const JET_paramLogFilePath: u32 = 2;
pub const JET_paramBaseName: u32 = 3;
pub const JET_paramEventSource: u32 = 4;
pub const JET_paramMaxSessions: u32 = 5;
pub const JET_paramMaxOpenTables: u32 = 6;
pub const JET_paramPreferredMaxOpenTables: u32 = 7;
pub const JET_paramCachedClosedTables: u32 = 125;
pub const JET_paramMaxCursors: u32 = 8;
pub const JET_paramMaxVerPages: u32 = 9;
pub const JET_paramPreferredVerPages: u32 = 63;
pub const JET_paramGlobalMinVerPages: u32 = 81;
pub const JET_paramVersionStoreTaskQueueMax: u32 = 105;
pub const JET_paramMaxTemporaryTables: u32 = 10;
pub const JET_paramLogFileSize: u32 = 11;
pub const JET_paramLogBuffers: u32 = 12;
pub const JET_paramWaitLogFlush: u32 = 13;
pub const JET_paramLogCheckpointPeriod: u32 = 14;
pub const JET_paramLogWaitingUserMax: u32 = 15;
pub const JET_paramCommitDefault: u32 = 16;
pub const JET_paramCircularLog: u32 = 17;
pub const JET_paramDbExtensionSize: u32 = 18;
pub const JET_paramPageTempDBMin: u32 = 19;
pub const JET_paramPageFragment: u32 = 20;
pub const JET_paramEnableFileCache: u32 = 126;
pub const JET_paramVerPageSize: u32 = 128;
pub const JET_paramConfiguration: u32 = 129;
pub const JET_paramEnableAdvanced: u32 = 130;
pub const JET_paramMaxColtyp: u32 = 131;
pub const JET_paramBatchIOBufferMax: u32 = 22;
pub const JET_paramCacheSize: u32 = 41;
pub const JET_paramCacheSizeMin: u32 = 60;
pub const JET_paramCacheSizeMax: u32 = 23;
pub const JET_paramCheckpointDepthMax: u32 = 24;
pub const JET_paramLRUKCorrInterval: u32 = 25;
pub const JET_paramLRUKHistoryMax: u32 = 26;
pub const JET_paramLRUKPolicy: u32 = 27;
pub const JET_paramLRUKTimeout: u32 = 28;
pub const JET_paramLRUKTrxCorrInterval: u32 = 29;
pub const JET_paramOutstandingIOMax: u32 = 30;
pub const JET_paramStartFlushThreshold: u32 = 31;
pub const JET_paramStopFlushThreshold: u32 = 32;
pub const JET_paramEnableViewCache: u32 = 127;
pub const JET_paramCheckpointIOMax: u32 = 135;
pub const JET_paramTableClass1Name: u32 = 137;
pub const JET_paramTableClass2Name: u32 = 138;
pub const JET_paramTableClass3Name: u32 = 139;
pub const JET_paramTableClass4Name: u32 = 140;
pub const JET_paramTableClass5Name: u32 = 141;
pub const JET_paramTableClass6Name: u32 = 142;
pub const JET_paramTableClass7Name: u32 = 143;
pub const JET_paramTableClass8Name: u32 = 144;
pub const JET_paramTableClass9Name: u32 = 145;
pub const JET_paramTableClass10Name: u32 = 146;
pub const JET_paramTableClass11Name: u32 = 147;
pub const JET_paramTableClass12Name: u32 = 148;
pub const JET_paramTableClass13Name: u32 = 149;
pub const JET_paramTableClass14Name: u32 = 150;
pub const JET_paramTableClass15Name: u32 = 151;
pub const JET_paramIOPriority: u32 = 152;
pub const JET_paramRecovery: u32 = 34;
pub const JET_paramEnableOnlineDefrag: u32 = 35;
pub const JET_paramCheckFormatWhenOpenFail: u32 = 44;
pub const JET_paramEnableTempTableVersioning: u32 = 46;
pub const JET_paramIgnoreLogVersion: u32 = 47;
pub const JET_paramDeleteOldLogs: u32 = 48;
pub const JET_paramEventSourceKey: u32 = 49;
pub const JET_paramNoInformationEvent: u32 = 50;
pub const JET_paramEventLoggingLevel: u32 = 51;
pub const JET_paramDeleteOutOfRangeLogs: u32 = 52;
pub const JET_paramAccessDeniedRetryPeriod: u32 = 53;
pub const JET_paramEnableIndexChecking: u32 = 45;
pub const JET_paramEnableIndexCleanup: u32 = 54;
pub const JET_paramDatabasePageSize: u32 = 64;
pub const JET_paramDisableCallbacks: u32 = 65;
pub const JET_paramLogFileCreateAsynch: u32 = 69;
pub const JET_paramErrorToString: u32 = 70;
pub const JET_paramZeroDatabaseDuringBackup: u32 = 71;
pub const JET_paramUnicodeIndexDefault: u32 = 72;
pub const JET_paramRuntimeCallback: u32 = 73;
pub const JET_paramCleanupMismatchedLogFiles: u32 = 77;
pub const JET_paramRecordUpgradeDirtyLevel: u32 = 78;
pub const JET_paramOSSnapshotTimeout: u32 = 82;
pub const JET_paramExceptionAction: u32 = 98;
pub const JET_paramEventLogCache: u32 = 99;
pub const JET_paramCreatePathIfNotExist: u32 = 100;
pub const JET_paramPageHintCacheSize: u32 = 101;
pub const JET_paramOneDatabasePerSession: u32 = 102;
pub const JET_paramMaxInstances: u32 = 104;
pub const JET_paramDisablePerfmon: u32 = 107;
pub const JET_paramIndexTuplesLengthMin: u32 = 110;
pub const JET_paramIndexTuplesLengthMax: u32 = 111;
pub const JET_paramIndexTuplesToIndexMax: u32 = 112;
pub const JET_paramAlternateDatabaseRecoveryPath: u32 = 113;
pub const JET_paramIndexTupleIncrement: u32 = 132;
pub const JET_paramIndexTupleStart: u32 = 133;
pub const JET_paramKeyMost: u32 = 134;
pub const JET_paramLegacyFileNames: u32 = 136;
pub const JET_paramEnablePersistedCallbacks: u32 = 156;
pub const JET_paramWaypointLatency: u32 = 153;
pub const JET_paramDefragmentSequentialBTrees: u32 = 160;
pub const JET_paramDefragmentSequentialBTreesDensityCheckFrequency: u32 = 161;
pub const JET_paramIOThrottlingTimeQuanta: u32 = 162;
pub const JET_paramLVChunkSizeMost: u32 = 163;
pub const JET_paramMaxCoalesceReadSize: u32 = 164;
pub const JET_paramMaxCoalesceWriteSize: u32 = 165;
pub const JET_paramMaxCoalesceReadGapSize: u32 = 166;
pub const JET_paramMaxCoalesceWriteGapSize: u32 = 167;
pub const JET_paramEnableDBScanInRecovery: u32 = 169;
pub const JET_paramDbScanThrottle: u32 = 170;
pub const JET_paramDbScanIntervalMinSec: u32 = 171;
pub const JET_paramDbScanIntervalMaxSec: u32 = 172;
pub const JET_paramCachePriority: u32 = 177;
pub const JET_paramMaxTransactionSize: u32 = 178;
pub const JET_paramPrereadIOMax: u32 = 179;
pub const JET_paramEnableDBScanSerialization: u32 = 180;
pub const JET_paramHungIOThreshold: u32 = 181;
pub const JET_paramHungIOActions: u32 = 182;
pub const JET_paramMinDataForXpress: u32 = 183;
pub const JET_paramEnableShrinkDatabase: u32 = 184;
pub const JET_paramProcessFriendlyName: u32 = 186;
pub const JET_paramDurableCommitCallback: u32 = 187;
pub const JET_paramEnableSqm: u32 = 188;
pub const JET_paramConfigStoreSpec: u32 = 189;
pub const JET_paramMaxValueInvalid: u32 = 212;
pub const JET_sesparamCommitDefault: u32 = 4097;
pub const JET_sesparamTransactionLevel: u32 = 4099;
pub const JET_sesparamOperationContext: u32 = 4100;
pub const JET_sesparamCorrelationID: u32 = 4101;
pub const JET_sesparamMaxValueInvalid: u32 = 4109;
pub const JET_bitESE98FileNames: u32 = 1;
pub const JET_bitEightDotThreeSoftCompat: u32 = 2;
pub const JET_bitHungIOEvent: u32 = 1;
pub const JET_bitShrinkDatabaseOff: u32 = 0;
pub const JET_bitShrinkDatabaseOn: u32 = 1;
pub const JET_bitShrinkDatabaseRealtime: u32 = 2;
pub const JET_bitShrinkDatabaseTrim: u32 = 1;
pub const JET_bitReplayIgnoreMissingDB: u32 = 4;
pub const JET_bitRecoveryWithoutUndo: u32 = 8;
pub const JET_bitTruncateLogsAfterRecovery: u32 = 16;
pub const JET_bitReplayMissingMapEntryDB: u32 = 32;
pub const JET_bitLogStreamMustExist: u32 = 64;
pub const JET_bitReplayIgnoreLostLogs: u32 = 128;
pub const JET_bitKeepDbAttachedAtEndOfRecovery: u32 = 4096;
pub const JET_bitTermComplete: u32 = 1;
pub const JET_bitTermAbrupt: u32 = 2;
pub const JET_bitTermStopBackup: u32 = 4;
pub const JET_bitTermDirty: u32 = 8;
pub const JET_bitIdleFlushBuffers: u32 = 1;
pub const JET_bitIdleCompact: u32 = 2;
pub const JET_bitIdleStatus: u32 = 4;
pub const JET_bitDbReadOnly: u32 = 1;
pub const JET_bitDbExclusive: u32 = 2;
pub const JET_bitDbDeleteCorruptIndexes: u32 = 16;
pub const JET_bitDbDeleteUnicodeIndexes: u32 = 1024;
pub const JET_bitDbUpgrade: u32 = 512;
pub const JET_bitDbEnableBackgroundMaintenance: u32 = 2048;
pub const JET_bitDbPurgeCacheOnAttach: u32 = 4096;
pub const JET_bitForceDetach: u32 = 1;
pub const JET_bitForceCloseAndDetach: u32 = 3;
pub const JET_bitDbRecoveryOff: u32 = 8;
pub const JET_bitDbShadowingOff: u32 = 128;
pub const JET_bitDbOverwriteExisting: u32 = 512;
pub const JET_bitBackupIncremental: u32 = 1;
pub const JET_bitBackupAtomic: u32 = 4;
pub const JET_bitBackupSnapshot: u32 = 16;
pub const JET_bitBackupEndNormal: u32 = 1;
pub const JET_bitBackupEndAbort: u32 = 2;
pub const JET_bitBackupTruncateDone: u32 = 256;
pub const JET_bitTableCreateFixedDDL: u32 = 1;
pub const JET_bitTableCreateTemplateTable: u32 = 2;
pub const JET_bitTableCreateNoFixedVarColumnsInDerivedTables: u32 = 4;
pub const JET_bitTableCreateImmutableStructure: u32 = 8;
pub const JET_bitColumnFixed: u32 = 1;
pub const JET_bitColumnTagged: u32 = 2;
pub const JET_bitColumnNotNULL: u32 = 4;
pub const JET_bitColumnVersion: u32 = 8;
pub const JET_bitColumnAutoincrement: u32 = 16;
pub const JET_bitColumnUpdatable: u32 = 32;
pub const JET_bitColumnTTKey: u32 = 64;
pub const JET_bitColumnTTDescending: u32 = 128;
pub const JET_bitColumnMultiValued: u32 = 1024;
pub const JET_bitColumnEscrowUpdate: u32 = 2048;
pub const JET_bitColumnUnversioned: u32 = 4096;
pub const JET_bitColumnMaybeNull: u32 = 8192;
pub const JET_bitColumnFinalize: u32 = 16384;
pub const JET_bitColumnUserDefinedDefault: u32 = 32768;
pub const JET_bitColumnDeleteOnZero: u32 = 131072;
pub const JET_bitColumnCompressed: u32 = 524288;
pub const JET_bitDeleteColumnIgnoreTemplateColumns: u32 = 1;
pub const JET_bitMoveFirst: u32 = 0;
pub const JET_bitNoMove: u32 = 2;
pub const JET_bitNewKey: u32 = 1;
pub const JET_bitStrLimit: u32 = 2;
pub const JET_bitSubStrLimit: u32 = 4;
pub const JET_bitNormalizedKey: u32 = 8;
pub const JET_bitKeyDataZeroLength: u32 = 16;
pub const JET_bitFullColumnStartLimit: u32 = 256;
pub const JET_bitFullColumnEndLimit: u32 = 512;
pub const JET_bitPartialColumnStartLimit: u32 = 1024;
pub const JET_bitPartialColumnEndLimit: u32 = 2048;
pub const JET_bitRangeInclusive: u32 = 1;
pub const JET_bitRangeUpperLimit: u32 = 2;
pub const JET_bitRangeInstantDuration: u32 = 4;
pub const JET_bitRangeRemove: u32 = 8;
pub const JET_bitReadLock: u32 = 1;
pub const JET_bitWriteLock: u32 = 2;
pub const JET_MoveFirst: u32 = 2147483648;
pub const JET_MovePrevious: i32 = -1;
pub const JET_MoveNext: u32 = 1;
pub const JET_MoveLast: u32 = 2147483647;
pub const JET_bitMoveKeyNE: u32 = 1;
pub const JET_bitSeekEQ: u32 = 1;
pub const JET_bitSeekLT: u32 = 2;
pub const JET_bitSeekLE: u32 = 4;
pub const JET_bitSeekGE: u32 = 8;
pub const JET_bitSeekGT: u32 = 16;
pub const JET_bitSetIndexRange: u32 = 32;
pub const JET_bitCheckUniqueness: u32 = 64;
pub const JET_bitBookmarkPermitVirtualCurrency: u32 = 1;
pub const JET_bitIndexColumnMustBeNull: u32 = 1;
pub const JET_bitIndexColumnMustBeNonNull: u32 = 2;
pub const JET_bitRecordInIndex: u32 = 1;
pub const JET_bitRecordNotInIndex: u32 = 2;
pub const JET_bitIndexUnique: u32 = 1;
pub const JET_bitIndexPrimary: u32 = 2;
pub const JET_bitIndexDisallowNull: u32 = 4;
pub const JET_bitIndexIgnoreNull: u32 = 8;
pub const JET_bitIndexIgnoreAnyNull: u32 = 32;
pub const JET_bitIndexIgnoreFirstNull: u32 = 64;
pub const JET_bitIndexLazyFlush: u32 = 128;
pub const JET_bitIndexEmpty: u32 = 256;
pub const JET_bitIndexUnversioned: u32 = 512;
pub const JET_bitIndexSortNullsHigh: u32 = 1024;
pub const JET_bitIndexUnicode: u32 = 2048;
pub const JET_bitIndexTuples: u32 = 4096;
pub const JET_bitIndexTupleLimits: u32 = 8192;
pub const JET_bitIndexCrossProduct: u32 = 16384;
pub const JET_bitIndexKeyMost: u32 = 32768;
pub const JET_bitIndexDisallowTruncation: u32 = 65536;
pub const JET_bitIndexNestedTable: u32 = 131072;
pub const JET_bitIndexDotNetGuid: u32 = 262144;
pub const JET_bitIndexImmutableStructure: u32 = 524288;
pub const JET_bitKeyAscending: u32 = 0;
pub const JET_bitKeyDescending: u32 = 1;
pub const JET_bitTableDenyWrite: u32 = 1;
pub const JET_bitTableDenyRead: u32 = 2;
pub const JET_bitTableReadOnly: u32 = 4;
pub const JET_bitTableUpdatable: u32 = 8;
pub const JET_bitTablePermitDDL: u32 = 16;
pub const JET_bitTableNoCache: u32 = 32;
pub const JET_bitTablePreread: u32 = 64;
pub const JET_bitTableOpportuneRead: u32 = 128;
pub const JET_bitTableSequential: u32 = 32768;
pub const JET_bitTableClassMask: u32 = 2031616;
pub const JET_bitTableClassNone: u32 = 0;
pub const JET_bitTableClass1: u32 = 65536;
pub const JET_bitTableClass2: u32 = 131072;
pub const JET_bitTableClass3: u32 = 196608;
pub const JET_bitTableClass4: u32 = 262144;
pub const JET_bitTableClass5: u32 = 327680;
pub const JET_bitTableClass6: u32 = 393216;
pub const JET_bitTableClass7: u32 = 458752;
pub const JET_bitTableClass8: u32 = 524288;
pub const JET_bitTableClass9: u32 = 589824;
pub const JET_bitTableClass10: u32 = 655360;
pub const JET_bitTableClass11: u32 = 720896;
pub const JET_bitTableClass12: u32 = 786432;
pub const JET_bitTableClass13: u32 = 851968;
pub const JET_bitTableClass14: u32 = 917504;
pub const JET_bitTableClass15: u32 = 983040;
pub const JET_bitLSReset: u32 = 1;
pub const JET_bitLSCursor: u32 = 2;
pub const JET_bitLSTable: u32 = 4;
pub const JET_bitPrereadForward: u32 = 1;
pub const JET_bitPrereadBackward: u32 = 2;
pub const JET_bitPrereadFirstPage: u32 = 4;
pub const JET_bitPrereadNormalizedKey: u32 = 8;
pub const JET_bitTTIndexed: u32 = 1;
pub const JET_bitTTUnique: u32 = 2;
pub const JET_bitTTUpdatable: u32 = 4;
pub const JET_bitTTScrollable: u32 = 8;
pub const JET_bitTTSortNullsHigh: u32 = 16;
pub const JET_bitTTForceMaterialization: u32 = 32;
pub const JET_bitTTErrorOnDuplicateInsertion: u32 = 32;
pub const JET_bitTTForwardOnly: u32 = 64;
pub const JET_bitTTIntrinsicLVsOnly: u32 = 128;
pub const JET_bitTTDotNetGuid: u32 = 256;
pub const JET_bitSetAppendLV: u32 = 1;
pub const JET_bitSetOverwriteLV: u32 = 4;
pub const JET_bitSetSizeLV: u32 = 8;
pub const JET_bitSetZeroLength: u32 = 32;
pub const JET_bitSetSeparateLV: u32 = 64;
pub const JET_bitSetUniqueMultiValues: u32 = 128;
pub const JET_bitSetUniqueNormalizedMultiValues: u32 = 256;
pub const JET_bitSetRevertToDefaultValue: u32 = 512;
pub const JET_bitSetIntrinsicLV: u32 = 1024;
pub const JET_bitSetUncompressed: u32 = 65536;
pub const JET_bitSetCompressed: u32 = 131072;
pub const JET_bitSpaceHintsUtilizeParentSpace: u32 = 1;
pub const JET_bitCreateHintAppendSequential: u32 = 2;
pub const JET_bitCreateHintHotpointSequential: u32 = 4;
pub const JET_bitRetrieveHintReserve1: u32 = 8;
pub const JET_bitRetrieveHintTableScanForward: u32 = 16;
pub const JET_bitRetrieveHintTableScanBackward: u32 = 32;
pub const JET_bitRetrieveHintReserve2: u32 = 64;
pub const JET_bitRetrieveHintReserve3: u32 = 128;
pub const JET_bitDeleteHintTableSequential: u32 = 256;
pub const JET_prepInsert: u32 = 0;
pub const JET_prepReplace: u32 = 2;
pub const JET_prepCancel: u32 = 3;
pub const JET_prepReplaceNoLock: u32 = 4;
pub const JET_prepInsertCopy: u32 = 5;
pub const JET_prepInsertCopyDeleteOriginal: u32 = 7;
pub const JET_prepInsertCopyReplaceOriginal: u32 = 9;
pub const JET_sqmDisable: u32 = 0;
pub const JET_sqmEnable: u32 = 1;
pub const JET_sqmFromCEIP: u32 = 2;
pub const JET_bitUpdateCheckESE97Compatibility: u32 = 1;
pub const JET_bitEscrowNoRollback: u32 = 1;
pub const JET_bitRetrieveCopy: u32 = 1;
pub const JET_bitRetrieveFromIndex: u32 = 2;
pub const JET_bitRetrieveFromPrimaryBookmark: u32 = 4;
pub const JET_bitRetrieveTag: u32 = 8;
pub const JET_bitRetrieveNull: u32 = 16;
pub const JET_bitRetrieveIgnoreDefault: u32 = 32;
pub const JET_bitRetrieveTuple: u32 = 2048;
pub const JET_bitZeroLength: u32 = 1;
pub const JET_bitEnumerateCopy: u32 = 1;
pub const JET_bitEnumerateIgnoreDefault: u32 = 32;
pub const JET_bitEnumeratePresenceOnly: u32 = 131072;
pub const JET_bitEnumerateTaggedOnly: u32 = 262144;
pub const JET_bitEnumerateCompressOutput: u32 = 524288;
pub const JET_bitEnumerateIgnoreUserDefinedDefault: u32 = 1048576;
pub const JET_bitEnumerateInRecordOnly: u32 = 2097152;
pub const JET_bitRecordSizeInCopyBuffer: u32 = 1;
pub const JET_bitRecordSizeRunningTotal: u32 = 2;
pub const JET_bitRecordSizeLocal: u32 = 4;
pub const JET_bitTransactionReadOnly: u32 = 1;
pub const JET_bitCommitLazyFlush: u32 = 1;
pub const JET_bitWaitLastLevel0Commit: u32 = 2;
pub const JET_bitWaitAllLevel0Commit: u32 = 8;
pub const JET_bitForceNewLog: u32 = 16;
pub const JET_bitRollbackAll: u32 = 1;
pub const JET_bitIncrementalSnapshot: u32 = 1;
pub const JET_bitCopySnapshot: u32 = 2;
pub const JET_bitContinueAfterThaw: u32 = 4;
pub const JET_bitExplicitPrepare: u32 = 8;
pub const JET_bitAllDatabasesSnapshot: u32 = 1;
pub const JET_bitAbortSnapshot: u32 = 1;
pub const JET_DbInfoFilename: u32 = 0;
pub const JET_DbInfoConnect: u32 = 1;
pub const JET_DbInfoCountry: u32 = 2;
pub const JET_DbInfoLCID: u32 = 3;
pub const JET_DbInfoLangid: u32 = 3;
pub const JET_DbInfoCp: u32 = 4;
pub const JET_DbInfoCollate: u32 = 5;
pub const JET_DbInfoOptions: u32 = 6;
pub const JET_DbInfoTransactions: u32 = 7;
pub const JET_DbInfoVersion: u32 = 8;
pub const JET_DbInfoIsam: u32 = 9;
pub const JET_DbInfoFilesize: u32 = 10;
pub const JET_DbInfoSpaceOwned: u32 = 11;
pub const JET_DbInfoSpaceAvailable: u32 = 12;
pub const JET_DbInfoUpgrade: u32 = 13;
pub const JET_DbInfoMisc: u32 = 14;
pub const JET_DbInfoDBInUse: u32 = 15;
pub const JET_DbInfoPageSize: u32 = 17;
pub const JET_DbInfoFileType: u32 = 19;
pub const JET_DbInfoFilesizeOnDisk: u32 = 21;
pub const JET_dbstateJustCreated: u32 = 1;
pub const JET_dbstateDirtyShutdown: u32 = 2;
pub const JET_dbstateCleanShutdown: u32 = 3;
pub const JET_dbstateBeingConverted: u32 = 4;
pub const JET_dbstateForceDetach: u32 = 5;
pub const JET_filetypeUnknown: u32 = 0;
pub const JET_filetypeDatabase: u32 = 1;
pub const JET_filetypeLog: u32 = 3;
pub const JET_filetypeCheckpoint: u32 = 4;
pub const JET_filetypeTempDatabase: u32 = 5;
pub const JET_filetypeFlushMap: u32 = 7;
pub const JET_coltypNil: u32 = 0;
pub const JET_coltypBit: u32 = 1;
pub const JET_coltypUnsignedByte: u32 = 2;
pub const JET_coltypShort: u32 = 3;
pub const JET_coltypLong: u32 = 4;
pub const JET_coltypCurrency: u32 = 5;
pub const JET_coltypIEEESingle: u32 = 6;
pub const JET_coltypIEEEDouble: u32 = 7;
pub const JET_coltypDateTime: u32 = 8;
pub const JET_coltypBinary: u32 = 9;
pub const JET_coltypText: u32 = 10;
pub const JET_coltypLongBinary: u32 = 11;
pub const JET_coltypLongText: u32 = 12;
pub const JET_coltypSLV: u32 = 13;
pub const JET_coltypUnsignedLong: u32 = 14;
pub const JET_coltypLongLong: u32 = 15;
pub const JET_coltypGUID: u32 = 16;
pub const JET_coltypUnsignedShort: u32 = 17;
pub const JET_coltypUnsignedLongLong: u32 = 18;
pub const JET_coltypMax: u32 = 19;
pub const JET_ObjInfo: u32 = 0;
pub const JET_ObjInfoListNoStats: u32 = 1;
pub const JET_ObjInfoList: u32 = 2;
pub const JET_ObjInfoSysTabCursor: u32 = 3;
pub const JET_ObjInfoListACM: u32 = 4;
pub const JET_ObjInfoNoStats: u32 = 5;
pub const JET_ObjInfoSysTabReadOnly: u32 = 6;
pub const JET_ObjInfoRulesLoaded: u32 = 7;
pub const JET_ObjInfoMax: u32 = 8;
pub const JET_TblInfo: u32 = 0;
pub const JET_TblInfoName: u32 = 1;
pub const JET_TblInfoDbid: u32 = 2;
pub const JET_TblInfoMostMany: u32 = 3;
pub const JET_TblInfoRvt: u32 = 4;
pub const JET_TblInfoOLC: u32 = 5;
pub const JET_TblInfoResetOLC: u32 = 6;
pub const JET_TblInfoSpaceUsage: u32 = 7;
pub const JET_TblInfoDumpTable: u32 = 8;
pub const JET_TblInfoSpaceAlloc: u32 = 9;
pub const JET_TblInfoSpaceOwned: u32 = 10;
pub const JET_TblInfoSpaceAvailable: u32 = 11;
pub const JET_TblInfoTemplateTableName: u32 = 12;
pub const JET_IdxInfo: u32 = 0;
pub const JET_IdxInfoList: u32 = 1;
pub const JET_IdxInfoSysTabCursor: u32 = 2;
pub const JET_IdxInfoOLC: u32 = 3;
pub const JET_IdxInfoResetOLC: u32 = 4;
pub const JET_IdxInfoSpaceAlloc: u32 = 5;
pub const JET_IdxInfoLCID: u32 = 6;
pub const JET_IdxInfoLangid: u32 = 6;
pub const JET_IdxInfoCount: u32 = 7;
pub const JET_IdxInfoVarSegMac: u32 = 8;
pub const JET_IdxInfoIndexId: u32 = 9;
pub const JET_IdxInfoKeyMost: u32 = 10;
pub const JET_IdxInfoCreateIndex: u32 = 11;
pub const JET_IdxInfoCreateIndex2: u32 = 12;
pub const JET_IdxInfoCreateIndex3: u32 = 13;
pub const JET_IdxInfoLocaleName: u32 = 14;
pub const JET_ColInfo: u32 = 0;
pub const JET_ColInfoList: u32 = 1;
pub const JET_ColInfoSysTabCursor: u32 = 3;
pub const JET_ColInfoBase: u32 = 4;
pub const JET_ColInfoListCompact: u32 = 5;
pub const JET_ColInfoByColid: u32 = 6;
pub const JET_ColInfoListSortColumnid: u32 = 7;
pub const JET_ColInfoBaseByColid: u32 = 8;
pub const JET_ColInfoGrbitNonDerivedColumnsOnly: u32 = 2147483648;
pub const JET_ColInfoGrbitMinimalInfo: u32 = 1073741824;
pub const JET_ColInfoGrbitSortByColumnid: u32 = 536870912;
pub const JET_InstanceMiscInfoLogSignature: u32 = 0;
pub const JET_objtypNil: u32 = 0;
pub const JET_objtypTable: u32 = 1;
pub const JET_bitCompactStats: u32 = 32;
pub const JET_bitCompactRepair: u32 = 64;
pub const JET_snpRepair: u32 = 2;
pub const JET_snpCompact: u32 = 4;
pub const JET_snpRestore: u32 = 8;
pub const JET_snpBackup: u32 = 9;
pub const JET_snpUpgrade: u32 = 10;
pub const JET_snpScrub: u32 = 11;
pub const JET_snpUpgradeRecordFormat: u32 = 12;
pub const JET_sntBegin: u32 = 5;
pub const JET_sntRequirements: u32 = 7;
pub const JET_sntProgress: u32 = 0;
pub const JET_sntComplete: u32 = 6;
pub const JET_sntFail: u32 = 3;
pub const JET_ExceptionMsgBox: u32 = 1;
pub const JET_ExceptionNone: u32 = 2;
pub const JET_ExceptionFailFast: u32 = 4;
pub const JET_OnlineDefragDisable: u32 = 0;
pub const JET_OnlineDefragAllOBSOLETE: u32 = 1;
pub const JET_OnlineDefragDatabases: u32 = 2;
pub const JET_OnlineDefragSpaceTrees: u32 = 4;
pub const JET_OnlineDefragAll: u32 = 65535;
pub const JET_ErrorInfoSpecificErr: u32 = 1;
pub const JET_bitResizeDatabaseOnlyGrow: u32 = 1;
pub const JET_bitResizeDatabaseOnlyShrink: u32 = 2;
pub const JET_bitStopServiceAll: u32 = 0;
pub const JET_bitStopServiceBackgroundUserTasks: u32 = 2;
pub const JET_bitStopServiceQuiesceCaches: u32 = 4;
pub const JET_bitStopServiceResume: u32 = 2147483648;
pub const JET_errSuccess: u32 = 0;
pub const JET_wrnNyi: i32 = -1;
pub const JET_errRfsFailure: i32 = -100;
pub const JET_errRfsNotArmed: i32 = -101;
pub const JET_errFileClose: i32 = -102;
pub const JET_errOutOfThreads: i32 = -103;
pub const JET_errTooManyIO: i32 = -105;
pub const JET_errTaskDropped: i32 = -106;
pub const JET_errInternalError: i32 = -107;
pub const JET_errDisabledFunctionality: i32 = -112;
pub const JET_errUnloadableOSFunctionality: i32 = -113;
pub const JET_errDatabaseBufferDependenciesCorrupted: i32 = -255;
pub const JET_wrnRemainingVersions: u32 = 321;
pub const JET_errPreviousVersion: i32 = -322;
pub const JET_errPageBoundary: i32 = -323;
pub const JET_errKeyBoundary: i32 = -324;
pub const JET_errBadPageLink: i32 = -327;
pub const JET_errBadBookmark: i32 = -328;
pub const JET_errNTSystemCallFailed: i32 = -334;
pub const JET_errBadParentPageLink: i32 = -338;
pub const JET_errSPAvailExtCacheOutOfSync: i32 = -340;
pub const JET_errSPAvailExtCorrupted: i32 = -341;
pub const JET_errSPAvailExtCacheOutOfMemory: i32 = -342;
pub const JET_errSPOwnExtCorrupted: i32 = -343;
pub const JET_errDbTimeCorrupted: i32 = -344;
pub const JET_wrnUniqueKey: u32 = 345;
pub const JET_errKeyTruncated: i32 = -346;
pub const JET_errDatabaseLeakInSpace: i32 = -348;
pub const JET_errBadEmptyPage: i32 = -351;
pub const wrnBTNotVisibleRejected: u32 = 352;
pub const wrnBTNotVisibleAccumulated: u32 = 353;
pub const JET_errBadLineCount: i32 = -354;
pub const JET_wrnSeparateLongValue: u32 = 406;
pub const JET_errKeyTooBig: i32 = -408;
pub const JET_errCannotSeparateIntrinsicLV: i32 = -416;
pub const JET_errSeparatedLongValue: i32 = -421;
pub const JET_errMustBeSeparateLongValue: i32 = -423;
pub const JET_errInvalidPreread: i32 = -424;
pub const JET_errInvalidLoggedOperation: i32 = -500;
pub const JET_errLogFileCorrupt: i32 = -501;
pub const JET_errNoBackupDirectory: i32 = -503;
pub const JET_errBackupDirectoryNotEmpty: i32 = -504;
pub const JET_errBackupInProgress: i32 = -505;
pub const JET_errRestoreInProgress: i32 = -506;
pub const JET_errMissingPreviousLogFile: i32 = -509;
pub const JET_errLogWriteFail: i32 = -510;
pub const JET_errLogDisabledDueToRecoveryFailure: i32 = -511;
pub const JET_errCannotLogDuringRecoveryRedo: i32 = -512;
pub const JET_errLogGenerationMismatch: i32 = -513;
pub const JET_errBadLogVersion: i32 = -514;
pub const JET_errInvalidLogSequence: i32 = -515;
pub const JET_errLoggingDisabled: i32 = -516;
pub const JET_errLogBufferTooSmall: i32 = -517;
pub const JET_errLogSequenceEnd: i32 = -519;
pub const JET_errNoBackup: i32 = -520;
pub const JET_errInvalidBackupSequence: i32 = -521;
pub const JET_errBackupNotAllowedYet: i32 = -523;
pub const JET_errDeleteBackupFileFail: i32 = -524;
pub const JET_errMakeBackupDirectoryFail: i32 = -525;
pub const JET_errInvalidBackup: i32 = -526;
pub const JET_errRecoveredWithErrors: i32 = -527;
pub const JET_errMissingLogFile: i32 = -528;
pub const JET_errLogDiskFull: i32 = -529;
pub const JET_errBadLogSignature: i32 = -530;
pub const JET_errBadDbSignature: i32 = -531;
pub const JET_errBadCheckpointSignature: i32 = -532;
pub const JET_errCheckpointCorrupt: i32 = -533;
pub const JET_errMissingPatchPage: i32 = -534;
pub const JET_errBadPatchPage: i32 = -535;
pub const JET_errRedoAbruptEnded: i32 = -536;
pub const JET_errPatchFileMissing: i32 = -538;
pub const JET_errDatabaseLogSetMismatch: i32 = -539;
pub const JET_errDatabaseStreamingFileMismatch: i32 = -540;
pub const JET_errLogFileSizeMismatch: i32 = -541;
pub const JET_errCheckpointFileNotFound: i32 = -542;
pub const JET_errRequiredLogFilesMissing: i32 = -543;
pub const JET_errSoftRecoveryOnBackupDatabase: i32 = -544;
pub const JET_errLogFileSizeMismatchDatabasesConsistent: i32 = -545;
pub const JET_errLogSectorSizeMismatch: i32 = -546;
pub const JET_errLogSectorSizeMismatchDatabasesConsistent: i32 = -547;
pub const JET_errLogSequenceEndDatabasesConsistent: i32 = -548;
pub const JET_errStreamingDataNotLogged: i32 = -549;
pub const JET_errDatabaseDirtyShutdown: i32 = -550;
pub const JET_errDatabaseInconsistent: i32 = -550;
pub const JET_errConsistentTimeMismatch: i32 = -551;
pub const JET_errDatabasePatchFileMismatch: i32 = -552;
pub const JET_errEndingRestoreLogTooLow: i32 = -553;
pub const JET_errStartingRestoreLogTooHigh: i32 = -554;
pub const JET_errGivenLogFileHasBadSignature: i32 = -555;
pub const JET_errGivenLogFileIsNotContiguous: i32 = -556;
pub const JET_errMissingRestoreLogFiles: i32 = -557;
pub const JET_wrnExistingLogFileHasBadSignature: u32 = 558;
pub const JET_wrnExistingLogFileIsNotContiguous: u32 = 559;
pub const JET_errMissingFullBackup: i32 = -560;
pub const JET_errBadBackupDatabaseSize: i32 = -561;
pub const JET_errDatabaseAlreadyUpgraded: i32 = -562;
pub const JET_errDatabaseIncompleteUpgrade: i32 = -563;
pub const JET_wrnSkipThisRecord: u32 = 564;
pub const JET_errMissingCurrentLogFiles: i32 = -565;
pub const JET_errDbTimeTooOld: i32 = -566;
pub const JET_errDbTimeTooNew: i32 = -567;
pub const JET_errMissingFileToBackup: i32 = -569;
pub const JET_errLogTornWriteDuringHardRestore: i32 = -570;
pub const JET_errLogTornWriteDuringHardRecovery: i32 = -571;
pub const JET_errLogCorruptDuringHardRestore: i32 = -573;
pub const JET_errLogCorruptDuringHardRecovery: i32 = -574;
pub const JET_errMustDisableLoggingForDbUpgrade: i32 = -575;
pub const JET_errBadRestoreTargetInstance: i32 = -577;
pub const JET_wrnTargetInstanceRunning: u32 = 578;
pub const JET_errRecoveredWithoutUndo: i32 = -579;
pub const JET_errDatabasesNotFromSameSnapshot: i32 = -580;
pub const JET_errSoftRecoveryOnSnapshot: i32 = -581;
pub const JET_errCommittedLogFilesMissing: i32 = -582;
pub const JET_errSectorSizeNotSupported: i32 = -583;
pub const JET_errRecoveredWithoutUndoDatabasesConsistent: i32 = -584;
pub const JET_wrnCommittedLogFilesLost: u32 = 585;
pub const JET_errCommittedLogFileCorrupt: i32 = -586;
pub const JET_wrnCommittedLogFilesRemoved: u32 = 587;
pub const JET_wrnFinishWithUndo: u32 = 588;
pub const JET_errLogSequenceChecksumMismatch: i32 = -590;
pub const JET_wrnDatabaseRepaired: u32 = 595;
pub const JET_errPageInitializedMismatch: i32 = -596;
pub const JET_errUnicodeTranslationBufferTooSmall: i32 = -601;
pub const JET_errUnicodeTranslationFail: i32 = -602;
pub const JET_errUnicodeNormalizationNotSupported: i32 = -603;
pub const JET_errUnicodeLanguageValidationFailure: i32 = -604;
pub const JET_errExistingLogFileHasBadSignature: i32 = -610;
pub const JET_errExistingLogFileIsNotContiguous: i32 = -611;
pub const JET_errLogReadVerifyFailure: i32 = -612;
pub const JET_errCheckpointDepthTooDeep: i32 = -614;
pub const JET_errRestoreOfNonBackupDatabase: i32 = -615;
pub const JET_errLogFileNotCopied: i32 = -616;
pub const JET_errTransactionTooLong: i32 = -618;
pub const JET_errEngineFormatVersionNoLongerSupportedTooLow: i32 = -619;
pub const JET_errEngineFormatVersionNotYetImplementedTooHigh: i32 = -620;
pub const JET_errEngineFormatVersionParamTooLowForRequestedFeature: i32 = -621;
pub const JET_errEngineFormatVersionSpecifiedTooLowForLogVersion: i32 = -622;
pub const JET_errEngineFormatVersionSpecifiedTooLowForDatabaseVersion: i32 = -623;
pub const JET_errBackupAbortByServer: i32 = -801;
pub const JET_errInvalidGrbit: i32 = -900;
pub const JET_errTermInProgress: i32 = -1000;
pub const JET_errFeatureNotAvailable: i32 = -1001;
pub const JET_errInvalidName: i32 = -1002;
pub const JET_errInvalidParameter: i32 = -1003;
pub const JET_wrnColumnNull: u32 = 1004;
pub const JET_wrnBufferTruncated: u32 = 1006;
pub const JET_wrnDatabaseAttached: u32 = 1007;
pub const JET_errDatabaseFileReadOnly: i32 = -1008;
pub const JET_wrnSortOverflow: u32 = 1009;
pub const JET_errInvalidDatabaseId: i32 = -1010;
pub const JET_errOutOfMemory: i32 = -1011;
pub const JET_errOutOfDatabaseSpace: i32 = -1012;
pub const JET_errOutOfCursors: i32 = -1013;
pub const JET_errOutOfBuffers: i32 = -1014;
pub const JET_errTooManyIndexes: i32 = -1015;
pub const JET_errTooManyKeys: i32 = -1016;
pub const JET_errRecordDeleted: i32 = -1017;
pub const JET_errReadVerifyFailure: i32 = -1018;
pub const JET_errPageNotInitialized: i32 = -1019;
pub const JET_errOutOfFileHandles: i32 = -1020;
pub const JET_errDiskReadVerificationFailure: i32 = -1021;
pub const JET_errDiskIO: i32 = -1022;
pub const JET_errInvalidPath: i32 = -1023;
pub const JET_errInvalidSystemPath: i32 = -1024;
pub const JET_errInvalidLogDirectory: i32 = -1025;
pub const JET_errRecordTooBig: i32 = -1026;
pub const JET_errTooManyOpenDatabases: i32 = -1027;
pub const JET_errInvalidDatabase: i32 = -1028;
pub const JET_errNotInitialized: i32 = -1029;
pub const JET_errAlreadyInitialized: i32 = -1030;
pub const JET_errInitInProgress: i32 = -1031;
pub const JET_errFileAccessDenied: i32 = -1032;
pub const JET_errBufferTooSmall: i32 = -1038;
pub const JET_wrnSeekNotEqual: u32 = 1039;
pub const JET_errTooManyColumns: i32 = -1040;
pub const JET_errContainerNotEmpty: i32 = -1043;
pub const JET_errInvalidFilename: i32 = -1044;
pub const JET_errInvalidBookmark: i32 = -1045;
pub const JET_errColumnInUse: i32 = -1046;
pub const JET_errInvalidBufferSize: i32 = -1047;
pub const JET_errColumnNotUpdatable: i32 = -1048;
pub const JET_errIndexInUse: i32 = -1051;
pub const JET_errLinkNotSupported: i32 = -1052;
pub const JET_errNullKeyDisallowed: i32 = -1053;
pub const JET_errNotInTransaction: i32 = -1054;
pub const JET_wrnNoErrorInfo: u32 = 1055;
pub const JET_errMustRollback: i32 = -1057;
pub const JET_wrnNoIdleActivity: u32 = 1058;
pub const JET_errTooManyActiveUsers: i32 = -1059;
pub const JET_errInvalidCountry: i32 = -1061;
pub const JET_errInvalidLanguageId: i32 = -1062;
pub const JET_errInvalidCodePage: i32 = -1063;
pub const JET_errInvalidLCMapStringFlags: i32 = -1064;
pub const JET_errVersionStoreEntryTooBig: i32 = -1065;
pub const JET_errVersionStoreOutOfMemoryAndCleanupTimedOut: i32 = -1066;
pub const JET_wrnNoWriteLock: u32 = 1067;
pub const JET_wrnColumnSetNull: u32 = 1068;
pub const JET_errVersionStoreOutOfMemory: i32 = -1069;
pub const JET_errCannotIndex: i32 = -1071;
pub const JET_errRecordNotDeleted: i32 = -1072;
pub const JET_errTooManyMempoolEntries: i32 = -1073;
pub const JET_errOutOfObjectIDs: i32 = -1074;
pub const JET_errOutOfLongValueIDs: i32 = -1075;
pub const JET_errOutOfAutoincrementValues: i32 = -1076;
pub const JET_errOutOfDbtimeValues: i32 = -1077;
pub const JET_errOutOfSequentialIndexValues: i32 = -1078;
pub const JET_errRunningInOneInstanceMode: i32 = -1080;
pub const JET_errRunningInMultiInstanceMode: i32 = -1081;
pub const JET_errSystemParamsAlreadySet: i32 = -1082;
pub const JET_errSystemPathInUse: i32 = -1083;
pub const JET_errLogFilePathInUse: i32 = -1084;
pub const JET_errTempPathInUse: i32 = -1085;
pub const JET_errInstanceNameInUse: i32 = -1086;
pub const JET_errSystemParameterConflict: i32 = -1087;
pub const JET_errInstanceUnavailable: i32 = -1090;
pub const JET_errDatabaseUnavailable: i32 = -1091;
pub const JET_errInstanceUnavailableDueToFatalLogDiskFull: i32 = -1092;
pub const JET_errInvalidSesparamId: i32 = -1093;
pub const JET_errTooManyRecords: i32 = -1094;
pub const JET_errInvalidDbparamId: i32 = -1095;
pub const JET_errOutOfSessions: i32 = -1101;
pub const JET_errWriteConflict: i32 = -1102;
pub const JET_errTransTooDeep: i32 = -1103;
pub const JET_errInvalidSesid: i32 = -1104;
pub const JET_errWriteConflictPrimaryIndex: i32 = -1105;
pub const JET_errInTransaction: i32 = -1108;
pub const JET_errRollbackRequired: i32 = -1109;
pub const JET_errTransReadOnly: i32 = -1110;
pub const JET_errSessionWriteConflict: i32 = -1111;
pub const JET_errRecordTooBigForBackwardCompatibility: i32 = -1112;
pub const JET_errCannotMaterializeForwardOnlySort: i32 = -1113;
pub const JET_errSesidTableIdMismatch: i32 = -1114;
pub const JET_errInvalidInstance: i32 = -1115;
pub const JET_errDirtyShutdown: i32 = -1116;
pub const JET_errReadPgnoVerifyFailure: i32 = -1118;
pub const JET_errReadLostFlushVerifyFailure: i32 = -1119;
pub const JET_errFileSystemCorruption: i32 = -1121;
pub const JET_wrnShrinkNotPossible: u32 = 1122;
pub const JET_errRecoveryVerifyFailure: i32 = -1123;
pub const JET_errFilteredMoveNotSupported: i32 = -1124;
pub const JET_errDatabaseDuplicate: i32 = -1201;
pub const JET_errDatabaseInUse: i32 = -1202;
pub const JET_errDatabaseNotFound: i32 = -1203;
pub const JET_errDatabaseInvalidName: i32 = -1204;
pub const JET_errDatabaseInvalidPages: i32 = -1205;
pub const JET_errDatabaseCorrupted: i32 = -1206;
pub const JET_errDatabaseLocked: i32 = -1207;
pub const JET_errCannotDisableVersioning: i32 = -1208;
pub const JET_errInvalidDatabaseVersion: i32 = -1209;
pub const JET_errDatabase200Format: i32 = -1210;
pub const JET_errDatabase400Format: i32 = -1211;
pub const JET_errDatabase500Format: i32 = -1212;
pub const JET_errPageSizeMismatch: i32 = -1213;
pub const JET_errTooManyInstances: i32 = -1214;
pub const JET_errDatabaseSharingViolation: i32 = -1215;
pub const JET_errAttachedDatabaseMismatch: i32 = -1216;
pub const JET_errDatabaseInvalidPath: i32 = -1217;
pub const JET_errDatabaseIdInUse: i32 = -1218;
pub const JET_errForceDetachNotAllowed: i32 = -1219;
pub const JET_errCatalogCorrupted: i32 = -1220;
pub const JET_errPartiallyAttachedDB: i32 = -1221;
pub const JET_errDatabaseSignInUse: i32 = -1222;
pub const JET_errDatabaseCorruptedNoRepair: i32 = -1224;
pub const JET_errInvalidCreateDbVersion: i32 = -1225;
pub const JET_errDatabaseNotReady: i32 = -1230;
pub const JET_errDatabaseAttachedForRecovery: i32 = -1231;
pub const JET_errTransactionsNotReadyDuringRecovery: i32 = -1232;
pub const JET_wrnTableEmpty: u32 = 1301;
pub const JET_errTableLocked: i32 = -1302;
pub const JET_errTableDuplicate: i32 = -1303;
pub const JET_errTableInUse: i32 = -1304;
pub const JET_errObjectNotFound: i32 = -1305;
pub const JET_errDensityInvalid: i32 = -1307;
pub const JET_errTableNotEmpty: i32 = -1308;
pub const JET_errInvalidTableId: i32 = -1310;
pub const JET_errTooManyOpenTables: i32 = -1311;
pub const JET_errIllegalOperation: i32 = -1312;
pub const JET_errTooManyOpenTablesAndCleanupTimedOut: i32 = -1313;
pub const JET_errObjectDuplicate: i32 = -1314;
pub const JET_errInvalidObject: i32 = -1316;
pub const JET_errCannotDeleteTempTable: i32 = -1317;
pub const JET_errCannotDeleteSystemTable: i32 = -1318;
pub const JET_errCannotDeleteTemplateTable: i32 = -1319;
pub const JET_errExclusiveTableLockRequired: i32 = -1322;
pub const JET_errFixedDDL: i32 = -1323;
pub const JET_errFixedInheritedDDL: i32 = -1324;
pub const JET_errCannotNestDDL: i32 = -1325;
pub const JET_errDDLNotInheritable: i32 = -1326;
pub const JET_wrnTableInUseBySystem: u32 = 1327;
pub const JET_errInvalidSettings: i32 = -1328;
pub const JET_errClientRequestToStopJetService: i32 = -1329;
pub const JET_errCannotAddFixedVarColumnToDerivedTable: i32 = -1330;
pub const JET_errIndexCantBuild: i32 = -1401;
pub const JET_errIndexHasPrimary: i32 = -1402;
pub const JET_errIndexDuplicate: i32 = -1403;
pub const JET_errIndexNotFound: i32 = -1404;
pub const JET_errIndexMustStay: i32 = -1405;
pub const JET_errIndexInvalidDef: i32 = -1406;
pub const JET_errInvalidCreateIndex: i32 = -1409;
pub const JET_errTooManyOpenIndexes: i32 = -1410;
pub const JET_errMultiValuedIndexViolation: i32 = -1411;
pub const JET_errIndexBuildCorrupted: i32 = -1412;
pub const JET_errPrimaryIndexCorrupted: i32 = -1413;
pub const JET_errSecondaryIndexCorrupted: i32 = -1414;
pub const JET_wrnCorruptIndexDeleted: u32 = 1415;
pub const JET_errInvalidIndexId: i32 = -1416;
pub const JET_wrnPrimaryIndexOutOfDate: u32 = 1417;
pub const JET_wrnSecondaryIndexOutOfDate: u32 = 1418;
pub const JET_errIndexTuplesSecondaryIndexOnly: i32 = -1430;
pub const JET_errIndexTuplesTooManyColumns: i32 = -1431;
pub const JET_errIndexTuplesOneColumnOnly: i32 = -1431;
pub const JET_errIndexTuplesNonUniqueOnly: i32 = -1432;
pub const JET_errIndexTuplesTextBinaryColumnsOnly: i32 = -1433;
pub const JET_errIndexTuplesTextColumnsOnly: i32 = -1433;
pub const JET_errIndexTuplesVarSegMacNotAllowed: i32 = -1434;
pub const JET_errIndexTuplesInvalidLimits: i32 = -1435;
pub const JET_errIndexTuplesCannotRetrieveFromIndex: i32 = -1436;
pub const JET_errIndexTuplesKeyTooSmall: i32 = -1437;
pub const JET_errInvalidLVChunkSize: i32 = -1438;
pub const JET_errColumnCannotBeEncrypted: i32 = -1439;
pub const JET_errCannotIndexOnEncryptedColumn: i32 = -1440;
pub const JET_errColumnLong: i32 = -1501;
pub const JET_errColumnNoChunk: i32 = -1502;
pub const JET_errColumnDoesNotFit: i32 = -1503;
pub const JET_errNullInvalid: i32 = -1504;
pub const JET_errColumnIndexed: i32 = -1505;
pub const JET_errColumnTooBig: i32 = -1506;
pub const JET_errColumnNotFound: i32 = -1507;
pub const JET_errColumnDuplicate: i32 = -1508;
pub const JET_errMultiValuedColumnMustBeTagged: i32 = -1509;
pub const JET_errColumnRedundant: i32 = -1510;
pub const JET_errInvalidColumnType: i32 = -1511;
pub const JET_wrnColumnMaxTruncated: u32 = 1512;
pub const JET_errTaggedNotNULL: i32 = -1514;
pub const JET_errNoCurrentIndex: i32 = -1515;
pub const JET_errKeyIsMade: i32 = -1516;
pub const JET_errBadColumnId: i32 = -1517;
pub const JET_errBadItagSequence: i32 = -1518;
pub const JET_errColumnInRelationship: i32 = -1519;
pub const JET_wrnCopyLongValue: u32 = 1520;
pub const JET_errCannotBeTagged: i32 = -1521;
pub const JET_errDefaultValueTooBig: i32 = -1524;
pub const JET_errMultiValuedDuplicate: i32 = -1525;
pub const JET_errLVCorrupted: i32 = -1526;
pub const JET_errMultiValuedDuplicateAfterTruncation: i32 = -1528;
pub const JET_errDerivedColumnCorruption: i32 = -1529;
pub const JET_errInvalidPlaceholderColumn: i32 = -1530;
pub const JET_wrnColumnSkipped: u32 = 1531;
pub const JET_wrnColumnNotLocal: u32 = 1532;
pub const JET_wrnColumnMoreTags: u32 = 1533;
pub const JET_wrnColumnTruncated: u32 = 1534;
pub const JET_wrnColumnPresent: u32 = 1535;
pub const JET_wrnColumnSingleValue: u32 = 1536;
pub const JET_wrnColumnDefault: u32 = 1537;
pub const JET_errColumnCannotBeCompressed: i32 = -1538;
pub const JET_wrnColumnNotInRecord: u32 = 1539;
pub const JET_errColumnNoEncryptionKey: i32 = -1540;
pub const JET_wrnColumnReference: u32 = 1541;
pub const JET_errRecordNotFound: i32 = -1601;
pub const JET_errRecordNoCopy: i32 = -1602;
pub const JET_errNoCurrentRecord: i32 = -1603;
pub const JET_errRecordPrimaryChanged: i32 = -1604;
pub const JET_errKeyDuplicate: i32 = -1605;
pub const JET_errAlreadyPrepared: i32 = -1607;
pub const JET_errKeyNotMade: i32 = -1608;
pub const JET_errUpdateNotPrepared: i32 = -1609;
pub const JET_wrnDataHasChanged: u32 = 1610;
pub const JET_errDataHasChanged: i32 = -1611;
pub const JET_wrnKeyChanged: u32 = 1618;
pub const JET_errLanguageNotSupported: i32 = -1619;
pub const JET_errDecompressionFailed: i32 = -1620;
pub const JET_errUpdateMustVersion: i32 = -1621;
pub const JET_errDecryptionFailed: i32 = -1622;
pub const JET_errEncryptionBadItag: i32 = -1623;
pub const JET_errTooManySorts: i32 = -1701;
pub const JET_errInvalidOnSort: i32 = -1702;
pub const JET_errTempFileOpenError: i32 = -1803;
pub const JET_errTooManyAttachedDatabases: i32 = -1805;
pub const JET_errDiskFull: i32 = -1808;
pub const JET_errPermissionDenied: i32 = -1809;
pub const JET_errFileNotFound: i32 = -1811;
pub const JET_errFileInvalidType: i32 = -1812;
pub const JET_wrnFileOpenReadOnly: u32 = 1813;
pub const JET_errFileAlreadyExists: i32 = -1814;
pub const JET_errAfterInitialization: i32 = -1850;
pub const JET_errLogCorrupted: i32 = -1852;
pub const JET_errInvalidOperation: i32 = -1906;
pub const JET_errAccessDenied: i32 = -1907;
pub const JET_wrnIdleFull: u32 = 1908;
pub const JET_errTooManySplits: i32 = -1909;
pub const JET_errSessionSharingViolation: i32 = -1910;
pub const JET_errEntryPointNotFound: i32 = -1911;
pub const JET_errSessionContextAlreadySet: i32 = -1912;
pub const JET_errSessionContextNotSetByThisThread: i32 = -1913;
pub const JET_errSessionInUse: i32 = -1914;
pub const JET_errRecordFormatConversionFailed: i32 = -1915;
pub const JET_errOneDatabasePerSession: i32 = -1916;
pub const JET_errRollbackError: i32 = -1917;
pub const JET_errFlushMapVersionUnsupported: i32 = -1918;
pub const JET_errFlushMapDatabaseMismatch: i32 = -1919;
pub const JET_errFlushMapUnrecoverable: i32 = -1920;
pub const JET_wrnDefragAlreadyRunning: u32 = 2000;
pub const JET_wrnDefragNotRunning: u32 = 2001;
pub const JET_errDatabaseAlreadyRunningMaintenance: i32 = -2004;
pub const JET_wrnCallbackNotRegistered: u32 = 2100;
pub const JET_errCallbackFailed: i32 = -2101;
pub const JET_errCallbackNotResolved: i32 = -2102;
pub const JET_errSpaceHintsInvalid: i32 = -2103;
pub const JET_errOSSnapshotInvalidSequence: i32 = -2401;
pub const JET_errOSSnapshotTimeOut: i32 = -2402;
pub const JET_errOSSnapshotNotAllowed: i32 = -2403;
pub const JET_errOSSnapshotInvalidSnapId: i32 = -2404;
pub const JET_errLSCallbackNotSpecified: i32 = -3000;
pub const JET_errLSAlreadySet: i32 = -3001;
pub const JET_errLSNotSet: i32 = -3002;
pub const JET_errFileIOSparse: i32 = -4000;
pub const JET_errFileIOBeyondEOF: i32 = -4001;
pub const JET_errFileIOAbort: i32 = -4002;
pub const JET_errFileIORetry: i32 = -4003;
pub const JET_errFileIOFail: i32 = -4004;
pub const JET_errFileCompressed: i32 = -4005;
pub const JET_BASE_NAME_LENGTH: u32 = 3;
pub const JET_bitDumpMinimum: u32 = 1;
pub const JET_bitDumpMaximum: u32 = 2;
pub const JET_bitDumpCacheMinimum: u32 = 4;
pub const JET_bitDumpCacheMaximum: u32 = 8;
pub const JET_bitDumpCacheIncludeDirtyPages: u32 = 16;
pub const JET_bitDumpCacheIncludeCachedPages: u32 = 32;
pub const JET_bitDumpCacheIncludeCorruptedPages: u32 = 64;
pub const JET_bitDumpCacheNoDecommit: u32 = 128;
pub type JET_API_PTR = ::std::os::raw::c_ulonglong;
pub type JET_ERR = ::std::os::raw::c_long;
pub type JET_HANDLE = JET_API_PTR;
pub type JET_INSTANCE = JET_API_PTR;
pub type JET_SESID = JET_API_PTR;
pub type JET_TABLEID = JET_API_PTR;
pub type JET_LS = JET_API_PTR;
pub type JET_COLUMNID = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_INDEXID {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub rgbIndexId: [::std::os::raw::c_uchar; 16usize],
}
pub type JET_INDEXID = tagJET_INDEXID;
pub type JET_DBID = ::std::os::raw::c_ulong;
pub type JET_OBJTYP = ::std::os::raw::c_ulong;
pub type JET_COLTYP = ::std::os::raw::c_ulong;
pub type JET_GRBIT = ::std::os::raw::c_ulong;
pub type JET_SNP = ::std::os::raw::c_ulong;
pub type JET_SNT = ::std::os::raw::c_ulong;
pub type JET_DATESERIAL = f64;
pub type JET_CBTYP = ::std::os::raw::c_ulong;
pub type JET_PFNSTATUS = ::std::option::Option<
    unsafe extern "C" fn(
        sesid: JET_SESID,
        snp: JET_SNP,
        snt: JET_SNT,
        pv: *mut ::std::os::raw::c_void,
    ) -> JET_ERR,
>;
pub type WCHAR = ::std::os::raw::c_ushort;
pub type JET_PSTR = *mut ::std::os::raw::c_char;
pub type JET_PCSTR = *const ::std::os::raw::c_char;
pub type JET_PWSTR = *mut WCHAR;
pub type JET_PCWSTR = *const WCHAR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_RSTMAP_A {
    pub szDatabaseName: *mut ::std::os::raw::c_char,
    pub szNewDatabaseName: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_RSTMAP_W {
    pub szDatabaseName: *mut WCHAR,
    pub szNewDatabaseName: *mut WCHAR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagCONVERT_A {
    pub szOldDll: *mut ::std::os::raw::c_char,
    pub __bindgen_anon_1: tagCONVERT_A__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagCONVERT_A__bindgen_ty_1 {
    pub fFlags: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: tagCONVERT_A__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct tagCONVERT_A__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl tagCONVERT_A__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn fSchemaChangesOnly(&self) -> ::std::os::raw::c_ulong {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fSchemaChangesOnly(&mut self, val: ::std::os::raw::c_ulong) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fSchemaChangesOnly: ::std::os::raw::c_ulong,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fSchemaChangesOnly: u32 = unsafe { ::std::mem::transmute(fSchemaChangesOnly) };
            fSchemaChangesOnly as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type JET_CONVERT_A = tagCONVERT_A;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagCONVERT_W {
    pub szOldDll: *mut WCHAR,
    pub __bindgen_anon_1: tagCONVERT_W__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagCONVERT_W__bindgen_ty_1 {
    pub fFlags: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: tagCONVERT_W__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct tagCONVERT_W__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl tagCONVERT_W__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn fSchemaChangesOnly(&self) -> ::std::os::raw::c_ulong {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fSchemaChangesOnly(&mut self, val: ::std::os::raw::c_ulong) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fSchemaChangesOnly: ::std::os::raw::c_ulong,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fSchemaChangesOnly: u32 = unsafe { ::std::mem::transmute(fSchemaChangesOnly) };
            fSchemaChangesOnly as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type JET_CONVERT_W = tagCONVERT_W;
pub type JET_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        sesid: JET_SESID,
        dbid: JET_DBID,
        tableid: JET_TABLEID,
        cbtyp: JET_CBTYP,
        pvArg1: *mut ::std::os::raw::c_void,
        pvArg2: *mut ::std::os::raw::c_void,
        pvContext: *mut ::std::os::raw::c_void,
        ulUnused: JET_API_PTR,
    ) -> JET_ERR,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_SNPROG {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub cunitDone: ::std::os::raw::c_ulong,
    pub cunitTotal: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JET_DBINFOUPGRADE {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub cbFilesizeLow: ::std::os::raw::c_ulong,
    pub cbFilesizeHigh: ::std::os::raw::c_ulong,
    pub cbFreeSpaceRequiredLow: ::std::os::raw::c_ulong,
    pub cbFreeSpaceRequiredHigh: ::std::os::raw::c_ulong,
    pub csecToUpgrade: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: JET_DBINFOUPGRADE__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JET_DBINFOUPGRADE__bindgen_ty_1 {
    pub ulFlags: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: JET_DBINFOUPGRADE__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct JET_DBINFOUPGRADE__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl JET_DBINFOUPGRADE__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn fUpgradable(&self) -> ::std::os::raw::c_ulong {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fUpgradable(&mut self, val: ::std::os::raw::c_ulong) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fAlreadyUpgraded(&self) -> ::std::os::raw::c_ulong {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fAlreadyUpgraded(&mut self, val: ::std::os::raw::c_ulong) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fUpgradable: ::std::os::raw::c_ulong,
        fAlreadyUpgraded: ::std::os::raw::c_ulong,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fUpgradable: u32 = unsafe { ::std::mem::transmute(fUpgradable) };
            fUpgradable as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let fAlreadyUpgraded: u32 = unsafe { ::std::mem::transmute(fAlreadyUpgraded) };
            fAlreadyUpgraded as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_OBJECTINFO {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub objtyp: JET_OBJTYP,
    pub dtCreate: JET_DATESERIAL,
    pub dtUpdate: JET_DATESERIAL,
    pub grbit: JET_GRBIT,
    pub flags: ::std::os::raw::c_ulong,
    pub cRecord: ::std::os::raw::c_ulong,
    pub cPage: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_OBJECTLIST {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub tableid: JET_TABLEID,
    pub cRecord: ::std::os::raw::c_ulong,
    pub columnidcontainername: JET_COLUMNID,
    pub columnidobjectname: JET_COLUMNID,
    pub columnidobjtyp: JET_COLUMNID,
    pub columniddtCreate: JET_COLUMNID,
    pub columniddtUpdate: JET_COLUMNID,
    pub columnidgrbit: JET_COLUMNID,
    pub columnidflags: JET_COLUMNID,
    pub columnidcRecord: JET_COLUMNID,
    pub columnidcPage: JET_COLUMNID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_COLUMNLIST {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub tableid: JET_TABLEID,
    pub cRecord: ::std::os::raw::c_ulong,
    pub columnidPresentationOrder: JET_COLUMNID,
    pub columnidcolumnname: JET_COLUMNID,
    pub columnidcolumnid: JET_COLUMNID,
    pub columnidcoltyp: JET_COLUMNID,
    pub columnidCountry: JET_COLUMNID,
    pub columnidLangid: JET_COLUMNID,
    pub columnidCp: JET_COLUMNID,
    pub columnidCollate: JET_COLUMNID,
    pub columnidcbMax: JET_COLUMNID,
    pub columnidgrbit: JET_COLUMNID,
    pub columnidDefault: JET_COLUMNID,
    pub columnidBaseTableName: JET_COLUMNID,
    pub columnidBaseColumnName: JET_COLUMNID,
    pub columnidDefinitionName: JET_COLUMNID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_COLUMNDEF {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub columnid: JET_COLUMNID,
    pub coltyp: JET_COLTYP,
    pub wCountry: ::std::os::raw::c_ushort,
    pub langid: ::std::os::raw::c_ushort,
    pub cp: ::std::os::raw::c_ushort,
    pub wCollate: ::std::os::raw::c_ushort,
    pub cbMax: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JET_COLUMNBASE_A {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub columnid: JET_COLUMNID,
    pub coltyp: JET_COLTYP,
    pub wCountry: ::std::os::raw::c_ushort,
    pub langid: ::std::os::raw::c_ushort,
    pub cp: ::std::os::raw::c_ushort,
    pub wFiller: ::std::os::raw::c_ushort,
    pub cbMax: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub szBaseTableName: [::std::os::raw::c_char; 256usize],
    pub szBaseColumnName: [::std::os::raw::c_char; 256usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JET_COLUMNBASE_W {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub columnid: JET_COLUMNID,
    pub coltyp: JET_COLTYP,
    pub wCountry: ::std::os::raw::c_ushort,
    pub langid: ::std::os::raw::c_ushort,
    pub cp: ::std::os::raw::c_ushort,
    pub wFiller: ::std::os::raw::c_ushort,
    pub cbMax: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub szBaseTableName: [WCHAR; 256usize],
    pub szBaseColumnName: [WCHAR; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_INDEXLIST {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub tableid: JET_TABLEID,
    pub cRecord: ::std::os::raw::c_ulong,
    pub columnidindexname: JET_COLUMNID,
    pub columnidgrbitIndex: JET_COLUMNID,
    pub columnidcKey: JET_COLUMNID,
    pub columnidcEntry: JET_COLUMNID,
    pub columnidcPage: JET_COLUMNID,
    pub columnidcColumn: JET_COLUMNID,
    pub columnidiColumn: JET_COLUMNID,
    pub columnidcolumnid: JET_COLUMNID,
    pub columnidcoltyp: JET_COLUMNID,
    pub columnidCountry: JET_COLUMNID,
    pub columnidLangid: JET_COLUMNID,
    pub columnidCp: JET_COLUMNID,
    pub columnidCollate: JET_COLUMNID,
    pub columnidgrbitColumn: JET_COLUMNID,
    pub columnidcolumnname: JET_COLUMNID,
    pub columnidLCMapFlags: JET_COLUMNID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_JET_COLUMNCREATE_A {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szColumnName: *mut ::std::os::raw::c_char,
    pub coltyp: JET_COLTYP,
    pub cbMax: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub pvDefault: *mut ::std::os::raw::c_void,
    pub cbDefault: ::std::os::raw::c_ulong,
    pub cp: ::std::os::raw::c_ulong,
    pub columnid: JET_COLUMNID,
    pub err: JET_ERR,
}
pub type JET_COLUMNCREATE_A = tag_JET_COLUMNCREATE_A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_JET_COLUMNCREATE_W {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szColumnName: *mut WCHAR,
    pub coltyp: JET_COLTYP,
    pub cbMax: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub pvDefault: *mut ::std::os::raw::c_void,
    pub cbDefault: ::std::os::raw::c_ulong,
    pub cp: ::std::os::raw::c_ulong,
    pub columnid: JET_COLUMNID,
    pub err: JET_ERR,
}
pub type JET_COLUMNCREATE_W = tag_JET_COLUMNCREATE_W;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_JET_USERDEFINEDDEFAULT_A {
    pub szCallback: *mut ::std::os::raw::c_char,
    pub pbUserData: *mut ::std::os::raw::c_uchar,
    pub cbUserData: ::std::os::raw::c_ulong,
    pub szDependantColumns: *mut ::std::os::raw::c_char,
}
pub type JET_USERDEFINEDDEFAULT_A = tag_JET_USERDEFINEDDEFAULT_A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tag_JET_USERDEFINEDDEFAULT_W {
    pub szCallback: *mut WCHAR,
    pub pbUserData: *mut ::std::os::raw::c_uchar,
    pub cbUserData: ::std::os::raw::c_ulong,
    pub szDependantColumns: *mut WCHAR,
}
pub type JET_USERDEFINEDDEFAULT_W = tag_JET_USERDEFINEDDEFAULT_W;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_CONDITIONALCOLUMN_A {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szColumnName: *mut ::std::os::raw::c_char,
    pub grbit: JET_GRBIT,
}
pub type JET_CONDITIONALCOLUMN_A = tagJET_CONDITIONALCOLUMN_A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_CONDITIONALCOLUMN_W {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szColumnName: *mut WCHAR,
    pub grbit: JET_GRBIT,
}
pub type JET_CONDITIONALCOLUMN_W = tagJET_CONDITIONALCOLUMN_W;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_UNICODEINDEX {
    pub lcid: ::std::os::raw::c_ulong,
    pub dwMapFlags: ::std::os::raw::c_ulong,
}
pub type JET_UNICODEINDEX = tagJET_UNICODEINDEX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_UNICODEINDEX2 {
    pub szLocaleName: *mut WCHAR,
    pub dwMapFlags: ::std::os::raw::c_ulong,
}
pub type JET_UNICODEINDEX2 = tagJET_UNICODEINDEX2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_TUPLELIMITS {
    pub chLengthMin: ::std::os::raw::c_ulong,
    pub chLengthMax: ::std::os::raw::c_ulong,
    pub chToIndexMax: ::std::os::raw::c_ulong,
    pub cchIncrement: ::std::os::raw::c_ulong,
    pub ichStart: ::std::os::raw::c_ulong,
}
pub type JET_TUPLELIMITS = tagJET_TUPLELIMITS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_SPACEHINTS {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub ulInitialDensity: ::std::os::raw::c_ulong,
    pub cbInitial: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub ulMaintDensity: ::std::os::raw::c_ulong,
    pub ulGrowth: ::std::os::raw::c_ulong,
    pub cbMinExtent: ::std::os::raw::c_ulong,
    pub cbMaxExtent: ::std::os::raw::c_ulong,
}
pub type JET_SPACEHINTS = tagJET_SPACEHINTS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagJET_INDEXCREATE_A {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szIndexName: *mut ::std::os::raw::c_char,
    pub szKey: *mut ::std::os::raw::c_char,
    pub cbKey: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: tagJET_INDEXCREATE_A__bindgen_ty_1,
    pub __bindgen_anon_2: tagJET_INDEXCREATE_A__bindgen_ty_2,
    pub rgconditionalcolumn: *mut JET_CONDITIONALCOLUMN_A,
    pub cConditionalColumn: ::std::os::raw::c_ulong,
    pub err: JET_ERR,
    pub cbKeyMost: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagJET_INDEXCREATE_A__bindgen_ty_1 {
    pub lcid: ::std::os::raw::c_ulong,
    pub pidxunicode: *mut JET_UNICODEINDEX,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagJET_INDEXCREATE_A__bindgen_ty_2 {
    pub cbVarSegMac: ::std::os::raw::c_ulong,
    pub ptuplelimits: *mut JET_TUPLELIMITS,
    _bindgen_union_align: u64,
}
pub type JET_INDEXCREATE_A = tagJET_INDEXCREATE_A;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagJET_INDEXCREATE_W {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szIndexName: *mut WCHAR,
    pub szKey: *mut WCHAR,
    pub cbKey: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: tagJET_INDEXCREATE_W__bindgen_ty_1,
    pub __bindgen_anon_2: tagJET_INDEXCREATE_W__bindgen_ty_2,
    pub rgconditionalcolumn: *mut JET_CONDITIONALCOLUMN_W,
    pub cConditionalColumn: ::std::os::raw::c_ulong,
    pub err: JET_ERR,
    pub cbKeyMost: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagJET_INDEXCREATE_W__bindgen_ty_1 {
    pub lcid: ::std::os::raw::c_ulong,
    pub pidxunicode: *mut JET_UNICODEINDEX,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagJET_INDEXCREATE_W__bindgen_ty_2 {
    pub cbVarSegMac: ::std::os::raw::c_ulong,
    pub ptuplelimits: *mut JET_TUPLELIMITS,
    _bindgen_union_align: u64,
}
pub type JET_INDEXCREATE_W = tagJET_INDEXCREATE_W;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagJET_INDEXCREATE2_A {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szIndexName: *mut ::std::os::raw::c_char,
    pub szKey: *mut ::std::os::raw::c_char,
    pub cbKey: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: tagJET_INDEXCREATE2_A__bindgen_ty_1,
    pub __bindgen_anon_2: tagJET_INDEXCREATE2_A__bindgen_ty_2,
    pub rgconditionalcolumn: *mut JET_CONDITIONALCOLUMN_A,
    pub cConditionalColumn: ::std::os::raw::c_ulong,
    pub err: JET_ERR,
    pub cbKeyMost: ::std::os::raw::c_ulong,
    pub pSpacehints: *mut JET_SPACEHINTS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagJET_INDEXCREATE2_A__bindgen_ty_1 {
    pub lcid: ::std::os::raw::c_ulong,
    pub pidxunicode: *mut JET_UNICODEINDEX,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagJET_INDEXCREATE2_A__bindgen_ty_2 {
    pub cbVarSegMac: ::std::os::raw::c_ulong,
    pub ptuplelimits: *mut JET_TUPLELIMITS,
    _bindgen_union_align: u64,
}
pub type JET_INDEXCREATE2_A = tagJET_INDEXCREATE2_A;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagJET_INDEXCREATE2_W {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szIndexName: *mut WCHAR,
    pub szKey: *mut WCHAR,
    pub cbKey: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub __bindgen_anon_1: tagJET_INDEXCREATE2_W__bindgen_ty_1,
    pub __bindgen_anon_2: tagJET_INDEXCREATE2_W__bindgen_ty_2,
    pub rgconditionalcolumn: *mut JET_CONDITIONALCOLUMN_W,
    pub cConditionalColumn: ::std::os::raw::c_ulong,
    pub err: JET_ERR,
    pub cbKeyMost: ::std::os::raw::c_ulong,
    pub pSpacehints: *mut JET_SPACEHINTS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagJET_INDEXCREATE2_W__bindgen_ty_1 {
    pub lcid: ::std::os::raw::c_ulong,
    pub pidxunicode: *mut JET_UNICODEINDEX,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagJET_INDEXCREATE2_W__bindgen_ty_2 {
    pub cbVarSegMac: ::std::os::raw::c_ulong,
    pub ptuplelimits: *mut JET_TUPLELIMITS,
    _bindgen_union_align: u64,
}
pub type JET_INDEXCREATE2_W = tagJET_INDEXCREATE2_W;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagJET_INDEXCREATE3_A {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szIndexName: *mut ::std::os::raw::c_char,
    pub szKey: *mut ::std::os::raw::c_char,
    pub cbKey: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub pidxunicode: *mut JET_UNICODEINDEX2,
    pub __bindgen_anon_1: tagJET_INDEXCREATE3_A__bindgen_ty_1,
    pub rgconditionalcolumn: *mut JET_CONDITIONALCOLUMN_A,
    pub cConditionalColumn: ::std::os::raw::c_ulong,
    pub err: JET_ERR,
    pub cbKeyMost: ::std::os::raw::c_ulong,
    pub pSpacehints: *mut JET_SPACEHINTS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagJET_INDEXCREATE3_A__bindgen_ty_1 {
    pub cbVarSegMac: ::std::os::raw::c_ulong,
    pub ptuplelimits: *mut JET_TUPLELIMITS,
    _bindgen_union_align: u64,
}
pub type JET_INDEXCREATE3_A = tagJET_INDEXCREATE3_A;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagJET_INDEXCREATE3_W {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szIndexName: *mut WCHAR,
    pub szKey: *mut WCHAR,
    pub cbKey: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub pidxunicode: *mut JET_UNICODEINDEX2,
    pub __bindgen_anon_1: tagJET_INDEXCREATE3_W__bindgen_ty_1,
    pub rgconditionalcolumn: *mut JET_CONDITIONALCOLUMN_W,
    pub cConditionalColumn: ::std::os::raw::c_ulong,
    pub err: JET_ERR,
    pub cbKeyMost: ::std::os::raw::c_ulong,
    pub pSpacehints: *mut JET_SPACEHINTS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagJET_INDEXCREATE3_W__bindgen_ty_1 {
    pub cbVarSegMac: ::std::os::raw::c_ulong,
    pub ptuplelimits: *mut JET_TUPLELIMITS,
    _bindgen_union_align: u64,
}
pub type JET_INDEXCREATE3_W = tagJET_INDEXCREATE3_W;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_TABLECREATE_A {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szTableName: *mut ::std::os::raw::c_char,
    pub szTemplateTableName: *mut ::std::os::raw::c_char,
    pub ulPages: ::std::os::raw::c_ulong,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub rgcolumncreate: *mut JET_COLUMNCREATE_A,
    pub cColumns: ::std::os::raw::c_ulong,
    pub rgindexcreate: *mut JET_INDEXCREATE_A,
    pub cIndexes: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub tableid: JET_TABLEID,
    pub cCreated: ::std::os::raw::c_ulong,
}
pub type JET_TABLECREATE_A = tagJET_TABLECREATE_A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_TABLECREATE_W {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szTableName: *mut WCHAR,
    pub szTemplateTableName: *mut WCHAR,
    pub ulPages: ::std::os::raw::c_ulong,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub rgcolumncreate: *mut JET_COLUMNCREATE_W,
    pub cColumns: ::std::os::raw::c_ulong,
    pub rgindexcreate: *mut JET_INDEXCREATE_W,
    pub cIndexes: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub tableid: JET_TABLEID,
    pub cCreated: ::std::os::raw::c_ulong,
}
pub type JET_TABLECREATE_W = tagJET_TABLECREATE_W;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_TABLECREATE2_A {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szTableName: *mut ::std::os::raw::c_char,
    pub szTemplateTableName: *mut ::std::os::raw::c_char,
    pub ulPages: ::std::os::raw::c_ulong,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub rgcolumncreate: *mut JET_COLUMNCREATE_A,
    pub cColumns: ::std::os::raw::c_ulong,
    pub rgindexcreate: *mut JET_INDEXCREATE_A,
    pub cIndexes: ::std::os::raw::c_ulong,
    pub szCallback: *mut ::std::os::raw::c_char,
    pub cbtyp: JET_CBTYP,
    pub grbit: JET_GRBIT,
    pub tableid: JET_TABLEID,
    pub cCreated: ::std::os::raw::c_ulong,
}
pub type JET_TABLECREATE2_A = tagJET_TABLECREATE2_A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_TABLECREATE2_W {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szTableName: *mut WCHAR,
    pub szTemplateTableName: *mut WCHAR,
    pub ulPages: ::std::os::raw::c_ulong,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub rgcolumncreate: *mut JET_COLUMNCREATE_W,
    pub cColumns: ::std::os::raw::c_ulong,
    pub rgindexcreate: *mut JET_INDEXCREATE_W,
    pub cIndexes: ::std::os::raw::c_ulong,
    pub szCallback: *mut WCHAR,
    pub cbtyp: JET_CBTYP,
    pub grbit: JET_GRBIT,
    pub tableid: JET_TABLEID,
    pub cCreated: ::std::os::raw::c_ulong,
}
pub type JET_TABLECREATE2_W = tagJET_TABLECREATE2_W;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_TABLECREATE3_A {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szTableName: *mut ::std::os::raw::c_char,
    pub szTemplateTableName: *mut ::std::os::raw::c_char,
    pub ulPages: ::std::os::raw::c_ulong,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub rgcolumncreate: *mut JET_COLUMNCREATE_A,
    pub cColumns: ::std::os::raw::c_ulong,
    pub rgindexcreate: *mut JET_INDEXCREATE2_A,
    pub cIndexes: ::std::os::raw::c_ulong,
    pub szCallback: *mut ::std::os::raw::c_char,
    pub cbtyp: JET_CBTYP,
    pub grbit: JET_GRBIT,
    pub pSeqSpacehints: *mut JET_SPACEHINTS,
    pub pLVSpacehints: *mut JET_SPACEHINTS,
    pub cbSeparateLV: ::std::os::raw::c_ulong,
    pub tableid: JET_TABLEID,
    pub cCreated: ::std::os::raw::c_ulong,
}
pub type JET_TABLECREATE3_A = tagJET_TABLECREATE3_A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_TABLECREATE3_W {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szTableName: *mut WCHAR,
    pub szTemplateTableName: *mut WCHAR,
    pub ulPages: ::std::os::raw::c_ulong,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub rgcolumncreate: *mut JET_COLUMNCREATE_W,
    pub cColumns: ::std::os::raw::c_ulong,
    pub rgindexcreate: *mut JET_INDEXCREATE2_W,
    pub cIndexes: ::std::os::raw::c_ulong,
    pub szCallback: *mut WCHAR,
    pub cbtyp: JET_CBTYP,
    pub grbit: JET_GRBIT,
    pub pSeqSpacehints: *mut JET_SPACEHINTS,
    pub pLVSpacehints: *mut JET_SPACEHINTS,
    pub cbSeparateLV: ::std::os::raw::c_ulong,
    pub tableid: JET_TABLEID,
    pub cCreated: ::std::os::raw::c_ulong,
}
pub type JET_TABLECREATE3_W = tagJET_TABLECREATE3_W;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_TABLECREATE4_A {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szTableName: *mut ::std::os::raw::c_char,
    pub szTemplateTableName: *mut ::std::os::raw::c_char,
    pub ulPages: ::std::os::raw::c_ulong,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub rgcolumncreate: *mut JET_COLUMNCREATE_A,
    pub cColumns: ::std::os::raw::c_ulong,
    pub rgindexcreate: *mut JET_INDEXCREATE3_A,
    pub cIndexes: ::std::os::raw::c_ulong,
    pub szCallback: *mut ::std::os::raw::c_char,
    pub cbtyp: JET_CBTYP,
    pub grbit: JET_GRBIT,
    pub pSeqSpacehints: *mut JET_SPACEHINTS,
    pub pLVSpacehints: *mut JET_SPACEHINTS,
    pub cbSeparateLV: ::std::os::raw::c_ulong,
    pub tableid: JET_TABLEID,
    pub cCreated: ::std::os::raw::c_ulong,
}
pub type JET_TABLECREATE4_A = tagJET_TABLECREATE4_A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_TABLECREATE4_W {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub szTableName: *mut WCHAR,
    pub szTemplateTableName: *mut WCHAR,
    pub ulPages: ::std::os::raw::c_ulong,
    pub ulDensity: ::std::os::raw::c_ulong,
    pub rgcolumncreate: *mut JET_COLUMNCREATE_W,
    pub cColumns: ::std::os::raw::c_ulong,
    pub rgindexcreate: *mut JET_INDEXCREATE3_W,
    pub cIndexes: ::std::os::raw::c_ulong,
    pub szCallback: *mut WCHAR,
    pub cbtyp: JET_CBTYP,
    pub grbit: JET_GRBIT,
    pub pSeqSpacehints: *mut JET_SPACEHINTS,
    pub pLVSpacehints: *mut JET_SPACEHINTS,
    pub cbSeparateLV: ::std::os::raw::c_ulong,
    pub tableid: JET_TABLEID,
    pub cCreated: ::std::os::raw::c_ulong,
}
pub type JET_TABLECREATE4_W = tagJET_TABLECREATE4_W;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_OPENTEMPORARYTABLE {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub prgcolumndef: *const JET_COLUMNDEF,
    pub ccolumn: ::std::os::raw::c_ulong,
    pub pidxunicode: *mut JET_UNICODEINDEX,
    pub grbit: JET_GRBIT,
    pub prgcolumnid: *mut JET_COLUMNID,
    pub cbKeyMost: ::std::os::raw::c_ulong,
    pub cbVarSegMac: ::std::os::raw::c_ulong,
    pub tableid: JET_TABLEID,
}
pub type JET_OPENTEMPORARYTABLE = tagJET_OPENTEMPORARYTABLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagJET_OPENTEMPORARYTABLE2 {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub prgcolumndef: *const JET_COLUMNDEF,
    pub ccolumn: ::std::os::raw::c_ulong,
    pub pidxunicode: *mut JET_UNICODEINDEX2,
    pub grbit: JET_GRBIT,
    pub prgcolumnid: *mut JET_COLUMNID,
    pub cbKeyMost: ::std::os::raw::c_ulong,
    pub cbVarSegMac: ::std::os::raw::c_ulong,
    pub tableid: JET_TABLEID,
}
pub type JET_OPENTEMPORARYTABLE2 = tagJET_OPENTEMPORARYTABLE2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_RETINFO {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub ibLongValue: ::std::os::raw::c_ulong,
    pub itagSequence: ::std::os::raw::c_ulong,
    pub columnidNextTagged: JET_COLUMNID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_SETINFO {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub ibLongValue: ::std::os::raw::c_ulong,
    pub itagSequence: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_RECPOS {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub centriesLT: ::std::os::raw::c_ulong,
    pub centriesInRange: ::std::os::raw::c_ulong,
    pub centriesTotal: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_RECORDLIST {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub tableid: JET_TABLEID,
    pub cRecord: ::std::os::raw::c_ulong,
    pub columnidBookmark: JET_COLUMNID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_INDEXRANGE {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub tableid: JET_TABLEID,
    pub grbit: JET_GRBIT,
}
pub const JET_RELOP_JET_relopEquals: JET_RELOP = 0;
pub const JET_RELOP_JET_relopPrefixEquals: JET_RELOP = 1;
pub const JET_RELOP_JET_relopNotEquals: JET_RELOP = 2;
pub const JET_RELOP_JET_relopLessThanOrEqual: JET_RELOP = 3;
pub const JET_RELOP_JET_relopLessThan: JET_RELOP = 4;
pub const JET_RELOP_JET_relopGreaterThanOrEqual: JET_RELOP = 5;
pub const JET_RELOP_JET_relopGreaterThan: JET_RELOP = 6;
pub const JET_RELOP_JET_relopBitmaskEqualsZero: JET_RELOP = 7;
pub const JET_RELOP_JET_relopBitmaskNotEqualsZero: JET_RELOP = 8;
pub type JET_RELOP = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_INDEX_COLUMN {
    pub columnid: JET_COLUMNID,
    pub relop: JET_RELOP,
    pub pv: *mut ::std::os::raw::c_void,
    pub cb: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_INDEX_RANGE {
    pub rgStartColumns: *mut JET_INDEX_COLUMN,
    pub cStartColumns: ::std::os::raw::c_ulong,
    pub rgEndColumns: *mut JET_INDEX_COLUMN,
    pub cEndColumns: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone, Debug)]
pub struct JET_LOGTIME {
    pub bSeconds: ::std::os::raw::c_char,
    pub bMinutes: ::std::os::raw::c_char,
    pub bHours: ::std::os::raw::c_char,
    pub bDay: ::std::os::raw::c_char,
    pub bMonth: ::std::os::raw::c_char,
    pub bYear: ::std::os::raw::c_char,
    pub __bindgen_anon_1: JET_LOGTIME__bindgen_ty_1,
    pub __bindgen_anon_2: JET_LOGTIME__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JET_LOGTIME__bindgen_ty_1 {
    pub bFiller1: ::std::os::raw::c_char,
    pub __bindgen_anon_1: JET_LOGTIME__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct JET_LOGTIME__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
}
impl JET_LOGTIME__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn fTimeIsUTC(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_fTimeIsUTC(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bMillisecondsLow(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_bMillisecondsLow(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fTimeIsUTC: ::std::os::raw::c_uchar,
        bMillisecondsLow: ::std::os::raw::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fTimeIsUTC: u8 = unsafe { ::std::mem::transmute(fTimeIsUTC) };
            fTimeIsUTC as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let bMillisecondsLow: u8 = unsafe { ::std::mem::transmute(bMillisecondsLow) };
            bMillisecondsLow as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JET_LOGTIME__bindgen_ty_2 {
    pub bFiller2: ::std::os::raw::c_char,
    pub __bindgen_anon_1: JET_LOGTIME__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct JET_LOGTIME__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
}
impl JET_LOGTIME__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn fReserved(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_fReserved(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bMillisecondsHigh(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_bMillisecondsHigh(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn fUnused(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_fUnused(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fReserved: ::std::os::raw::c_uchar,
        bMillisecondsHigh: ::std::os::raw::c_uchar,
        fUnused: ::std::os::raw::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fReserved: u8 = unsafe { ::std::mem::transmute(fReserved) };
            fReserved as u64
        });
        __bindgen_bitfield_unit.set(1usize, 3u8, {
            let bMillisecondsHigh: u8 = unsafe { ::std::mem::transmute(bMillisecondsHigh) };
            bMillisecondsHigh as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let fUnused: u8 = unsafe { ::std::mem::transmute(fUnused) };
            fUnused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone, Debug)]
pub struct JET_BKLOGTIME {
    pub bSeconds: ::std::os::raw::c_char,
    pub bMinutes: ::std::os::raw::c_char,
    pub bHours: ::std::os::raw::c_char,
    pub bDay: ::std::os::raw::c_char,
    pub bMonth: ::std::os::raw::c_char,
    pub bYear: ::std::os::raw::c_char,
    pub __bindgen_anon_1: JET_BKLOGTIME__bindgen_ty_1,
    pub __bindgen_anon_2: JET_BKLOGTIME__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JET_BKLOGTIME__bindgen_ty_1 {
    pub bFiller1: ::std::os::raw::c_char,
    pub __bindgen_anon_1: JET_BKLOGTIME__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct JET_BKLOGTIME__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
}
impl JET_BKLOGTIME__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn fTimeIsUTC(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_fTimeIsUTC(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bMillisecondsLow(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_bMillisecondsLow(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fTimeIsUTC: ::std::os::raw::c_uchar,
        bMillisecondsLow: ::std::os::raw::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fTimeIsUTC: u8 = unsafe { ::std::mem::transmute(fTimeIsUTC) };
            fTimeIsUTC as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let bMillisecondsLow: u8 = unsafe { ::std::mem::transmute(bMillisecondsLow) };
            bMillisecondsLow as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JET_BKLOGTIME__bindgen_ty_2 {
    pub bFiller2: ::std::os::raw::c_char,
    pub __bindgen_anon_1: JET_BKLOGTIME__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct JET_BKLOGTIME__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
}
impl JET_BKLOGTIME__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn fOSSnapshot(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_fOSSnapshot(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bMillisecondsHigh(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_bMillisecondsHigh(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn fReserved(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_fReserved(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fOSSnapshot: ::std::os::raw::c_uchar,
        bMillisecondsHigh: ::std::os::raw::c_uchar,
        fReserved: ::std::os::raw::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fOSSnapshot: u8 = unsafe { ::std::mem::transmute(fOSSnapshot) };
            fOSSnapshot as u64
        });
        __bindgen_bitfield_unit.set(1usize, 3u8, {
            let bMillisecondsHigh: u8 = unsafe { ::std::mem::transmute(bMillisecondsHigh) };
            bMillisecondsHigh as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let fReserved: u8 = unsafe { ::std::mem::transmute(fReserved) };
            fReserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct JET_LGPOS {
    pub ib: ::std::os::raw::c_ushort,
    pub isec: ::std::os::raw::c_ushort,
    pub lGeneration: ::std::os::raw::c_long,
}
#[repr(C, packed)]
#[derive(Copy, Clone, Debug)]
pub struct JET_SIGNATURE {
    pub ulRandom: ::std::os::raw::c_ulong,
    pub logtimeCreate: JET_LOGTIME,
    pub szComputerName: [::std::os::raw::c_char; 16usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone, Debug)]
pub struct JET_BKINFO {
    pub lgposMark: JET_LGPOS,
    pub __bindgen_anon_1: JET_BKINFO__bindgen_ty_1,
    pub genLow: ::std::os::raw::c_ulong,
    pub genHigh: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JET_BKINFO__bindgen_ty_1 {
    pub logtimeMark: JET_LOGTIME,
    pub bklogtimeMark: JET_BKLOGTIME,
    _bindgen_union_align: [u8; 8usize],
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct JET_DBINFOMISC {
    pub ulVersion: ::std::os::raw::c_ulong,
    pub ulUpdate: ::std::os::raw::c_ulong,
    pub signDb: JET_SIGNATURE,
    pub dbstate: ::std::os::raw::c_ulong,
    pub lgposConsistent: JET_LGPOS,
    pub logtimeConsistent: JET_LOGTIME,
    pub logtimeAttach: JET_LOGTIME,
    pub lgposAttach: JET_LGPOS,
    pub logtimeDetach: JET_LOGTIME,
    pub lgposDetach: JET_LGPOS,
    pub signLog: JET_SIGNATURE,
    pub bkinfoFullPrev: JET_BKINFO,
    pub bkinfoIncPrev: JET_BKINFO,
    pub bkinfoFullCur: JET_BKINFO,
    pub fShadowingDisabled: ::std::os::raw::c_ulong,
    pub fUpgradeDb: ::std::os::raw::c_ulong,
    pub dwMajorVersion: ::std::os::raw::c_ulong,
    pub dwMinorVersion: ::std::os::raw::c_ulong,
    pub dwBuildNumber: ::std::os::raw::c_ulong,
    pub lSPNumber: ::std::os::raw::c_long,
    pub cbPageSize: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JET_DBINFOMISC2 {
    pub ulVersion: ::std::os::raw::c_ulong,
    pub ulUpdate: ::std::os::raw::c_ulong,
    pub signDb: JET_SIGNATURE,
    pub dbstate: ::std::os::raw::c_ulong,
    pub lgposConsistent: JET_LGPOS,
    pub logtimeConsistent: JET_LOGTIME,
    pub logtimeAttach: JET_LOGTIME,
    pub lgposAttach: JET_LGPOS,
    pub logtimeDetach: JET_LOGTIME,
    pub lgposDetach: JET_LGPOS,
    pub signLog: JET_SIGNATURE,
    pub bkinfoFullPrev: JET_BKINFO,
    pub bkinfoIncPrev: JET_BKINFO,
    pub bkinfoFullCur: JET_BKINFO,
    pub fShadowingDisabled: ::std::os::raw::c_ulong,
    pub fUpgradeDb: ::std::os::raw::c_ulong,
    pub dwMajorVersion: ::std::os::raw::c_ulong,
    pub dwMinorVersion: ::std::os::raw::c_ulong,
    pub dwBuildNumber: ::std::os::raw::c_ulong,
    pub lSPNumber: ::std::os::raw::c_long,
    pub cbPageSize: ::std::os::raw::c_ulong,
    pub genMinRequired: ::std::os::raw::c_ulong,
    pub genMaxRequired: ::std::os::raw::c_ulong,
    pub logtimeGenMaxCreate: JET_LOGTIME,
    pub ulRepairCount: ::std::os::raw::c_ulong,
    pub logtimeRepair: JET_LOGTIME,
    pub ulRepairCountOld: ::std::os::raw::c_ulong,
    pub ulECCFixSuccess: ::std::os::raw::c_ulong,
    pub logtimeECCFixSuccess: JET_LOGTIME,
    pub ulECCFixSuccessOld: ::std::os::raw::c_ulong,
    pub ulECCFixFail: ::std::os::raw::c_ulong,
    pub logtimeECCFixFail: JET_LOGTIME,
    pub ulECCFixFailOld: ::std::os::raw::c_ulong,
    pub ulBadChecksum: ::std::os::raw::c_ulong,
    pub logtimeBadChecksum: JET_LOGTIME,
    pub ulBadChecksumOld: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JET_DBINFOMISC3 {
    pub ulVersion: ::std::os::raw::c_ulong,
    pub ulUpdate: ::std::os::raw::c_ulong,
    pub signDb: JET_SIGNATURE,
    pub dbstate: ::std::os::raw::c_ulong,
    pub lgposConsistent: JET_LGPOS,
    pub logtimeConsistent: JET_LOGTIME,
    pub logtimeAttach: JET_LOGTIME,
    pub lgposAttach: JET_LGPOS,
    pub logtimeDetach: JET_LOGTIME,
    pub lgposDetach: JET_LGPOS,
    pub signLog: JET_SIGNATURE,
    pub bkinfoFullPrev: JET_BKINFO,
    pub bkinfoIncPrev: JET_BKINFO,
    pub bkinfoFullCur: JET_BKINFO,
    pub fShadowingDisabled: ::std::os::raw::c_ulong,
    pub fUpgradeDb: ::std::os::raw::c_ulong,
    pub dwMajorVersion: ::std::os::raw::c_ulong,
    pub dwMinorVersion: ::std::os::raw::c_ulong,
    pub dwBuildNumber: ::std::os::raw::c_ulong,
    pub lSPNumber: ::std::os::raw::c_long,
    pub cbPageSize: ::std::os::raw::c_ulong,
    pub genMinRequired: ::std::os::raw::c_ulong,
    pub genMaxRequired: ::std::os::raw::c_ulong,
    pub logtimeGenMaxCreate: JET_LOGTIME,
    pub ulRepairCount: ::std::os::raw::c_ulong,
    pub logtimeRepair: JET_LOGTIME,
    pub ulRepairCountOld: ::std::os::raw::c_ulong,
    pub ulECCFixSuccess: ::std::os::raw::c_ulong,
    pub logtimeECCFixSuccess: JET_LOGTIME,
    pub ulECCFixSuccessOld: ::std::os::raw::c_ulong,
    pub ulECCFixFail: ::std::os::raw::c_ulong,
    pub logtimeECCFixFail: JET_LOGTIME,
    pub ulECCFixFailOld: ::std::os::raw::c_ulong,
    pub ulBadChecksum: ::std::os::raw::c_ulong,
    pub logtimeBadChecksum: JET_LOGTIME,
    pub ulBadChecksumOld: ::std::os::raw::c_ulong,
    pub genCommitted: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone, Debug)]
pub struct JET_DBINFOMISC4 {
    pub ulVersion: ::std::os::raw::c_ulong,
    pub ulUpdate: ::std::os::raw::c_ulong,
    pub signDb: JET_SIGNATURE,
    pub dbstate: ::std::os::raw::c_ulong,
    pub lgposConsistent: JET_LGPOS,
    pub logtimeConsistent: JET_LOGTIME,
    pub logtimeAttach: JET_LOGTIME,
    pub lgposAttach: JET_LGPOS,
    pub logtimeDetach: JET_LOGTIME,
    pub lgposDetach: JET_LGPOS,
    pub signLog: JET_SIGNATURE,
    pub bkinfoFullPrev: JET_BKINFO,
    pub bkinfoIncPrev: JET_BKINFO,
    pub bkinfoFullCur: JET_BKINFO,
    pub fShadowingDisabled: ::std::os::raw::c_ulong,
    pub fUpgradeDb: ::std::os::raw::c_ulong,
    pub dwMajorVersion: ::std::os::raw::c_ulong,
    pub dwMinorVersion: ::std::os::raw::c_ulong,
    pub dwBuildNumber: ::std::os::raw::c_ulong,
    pub lSPNumber: ::std::os::raw::c_long,
    pub cbPageSize: ::std::os::raw::c_ulong,
    pub genMinRequired: ::std::os::raw::c_ulong,
    pub genMaxRequired: ::std::os::raw::c_ulong,
    pub logtimeGenMaxCreate: JET_LOGTIME,
    pub ulRepairCount: ::std::os::raw::c_ulong,
    pub logtimeRepair: JET_LOGTIME,
    pub ulRepairCountOld: ::std::os::raw::c_ulong,
    pub ulECCFixSuccess: ::std::os::raw::c_ulong,
    pub logtimeECCFixSuccess: JET_LOGTIME,
    pub ulECCFixSuccessOld: ::std::os::raw::c_ulong,
    pub ulECCFixFail: ::std::os::raw::c_ulong,
    pub logtimeECCFixFail: JET_LOGTIME,
    pub ulECCFixFailOld: ::std::os::raw::c_ulong,
    pub ulBadChecksum: ::std::os::raw::c_ulong,
    pub logtimeBadChecksum: JET_LOGTIME,
    pub ulBadChecksumOld: ::std::os::raw::c_ulong,
    pub genCommitted: ::std::os::raw::c_ulong,
    pub bkinfoCopyPrev: JET_BKINFO,
    pub bkinfoDiffPrev: JET_BKINFO,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_THREADSTATS {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub cPageReferenced: ::std::os::raw::c_ulong,
    pub cPageRead: ::std::os::raw::c_ulong,
    pub cPagePreread: ::std::os::raw::c_ulong,
    pub cPageDirtied: ::std::os::raw::c_ulong,
    pub cPageRedirtied: ::std::os::raw::c_ulong,
    pub cLogRecord: ::std::os::raw::c_ulong,
    pub cbLogRecord: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_THREADSTATS2 {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub cPageReferenced: ::std::os::raw::c_ulong,
    pub cPageRead: ::std::os::raw::c_ulong,
    pub cPagePreread: ::std::os::raw::c_ulong,
    pub cPageDirtied: ::std::os::raw::c_ulong,
    pub cPageRedirtied: ::std::os::raw::c_ulong,
    pub cLogRecord: ::std::os::raw::c_ulong,
    pub cbLogRecord: ::std::os::raw::c_ulong,
    pub cusecPageCacheMiss: ::std::os::raw::c_ulonglong,
    pub cPageCacheMiss: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JET_RSTINFO_A {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub rgrstmap: *mut JET_RSTMAP_A,
    pub crstmap: ::std::os::raw::c_long,
    pub lgposStop: JET_LGPOS,
    pub logtimeStop: JET_LOGTIME,
    pub pfnStatus: JET_PFNSTATUS,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JET_RSTINFO_W {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub rgrstmap: *mut JET_RSTMAP_W,
    pub crstmap: ::std::os::raw::c_long,
    pub lgposStop: JET_LGPOS,
    pub logtimeStop: JET_LOGTIME,
    pub pfnStatus: JET_PFNSTATUS,
}
pub const JET_ERRCAT_JET_errcatUnknown: JET_ERRCAT = 0;
pub const JET_ERRCAT_JET_errcatError: JET_ERRCAT = 1;
pub const JET_ERRCAT_JET_errcatOperation: JET_ERRCAT = 2;
pub const JET_ERRCAT_JET_errcatFatal: JET_ERRCAT = 3;
pub const JET_ERRCAT_JET_errcatIO: JET_ERRCAT = 4;
pub const JET_ERRCAT_JET_errcatResource: JET_ERRCAT = 5;
pub const JET_ERRCAT_JET_errcatMemory: JET_ERRCAT = 6;
pub const JET_ERRCAT_JET_errcatQuota: JET_ERRCAT = 7;
pub const JET_ERRCAT_JET_errcatDisk: JET_ERRCAT = 8;
pub const JET_ERRCAT_JET_errcatData: JET_ERRCAT = 9;
pub const JET_ERRCAT_JET_errcatCorruption: JET_ERRCAT = 10;
pub const JET_ERRCAT_JET_errcatInconsistent: JET_ERRCAT = 11;
pub const JET_ERRCAT_JET_errcatFragmentation: JET_ERRCAT = 12;
pub const JET_ERRCAT_JET_errcatApi: JET_ERRCAT = 13;
pub const JET_ERRCAT_JET_errcatUsage: JET_ERRCAT = 14;
pub const JET_ERRCAT_JET_errcatState: JET_ERRCAT = 15;
pub const JET_ERRCAT_JET_errcatObsolete: JET_ERRCAT = 16;
pub const JET_ERRCAT_JET_errcatMax: JET_ERRCAT = 17;
pub type JET_ERRCAT = i32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JET_ERRINFOBASIC_W {
    pub cbStruct: ::std::os::raw::c_ulong,
    pub errValue: JET_ERR,
    pub errcatMostSpecific: JET_ERRCAT,
    pub rgCategoricalHierarchy: [::std::os::raw::c_uchar; 8usize],
    pub lSourceLine: ::std::os::raw::c_ulong,
    pub rgszSourceFile: [WCHAR; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JET_COMMIT_ID {
    pub signLog: JET_SIGNATURE,
    pub reserved: ::std::os::raw::c_int,
    pub commitId: ::std::os::raw::c_longlong,
}
pub type JET_PFNDURABLECOMMITCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        instance: JET_INSTANCE,
        pCommitIdSeen: *mut JET_COMMIT_ID,
        grbit: JET_GRBIT,
    ) -> JET_ERR,
>;
pub const JET_INDEXCHECKING_JET_IndexCheckingOff: JET_INDEXCHECKING = 0;
pub const JET_INDEXCHECKING_JET_IndexCheckingOn: JET_INDEXCHECKING = 1;
pub const JET_INDEXCHECKING_JET_IndexCheckingDeferToOpenTable: JET_INDEXCHECKING = 2;
pub const JET_INDEXCHECKING_JET_IndexCheckingMax: JET_INDEXCHECKING = 3;
pub type JET_INDEXCHECKING = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_OPERATIONCONTEXT {
    pub ulUserID: ::std::os::raw::c_ulong,
    pub nOperationID: ::std::os::raw::c_uchar,
    pub nOperationType: ::std::os::raw::c_uchar,
    pub nClientType: ::std::os::raw::c_uchar,
    pub fFlags: ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_SETCOLUMN {
    pub columnid: JET_COLUMNID,
    pub pvData: *const ::std::os::raw::c_void,
    pub cbData: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub ibLongValue: ::std::os::raw::c_ulong,
    pub itagSequence: ::std::os::raw::c_ulong,
    pub err: JET_ERR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_SETSYSPARAM_A {
    pub paramid: ::std::os::raw::c_ulong,
    pub lParam: JET_API_PTR,
    pub sz: *const ::std::os::raw::c_char,
    pub err: JET_ERR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_SETSYSPARAM_W {
    pub paramid: ::std::os::raw::c_ulong,
    pub lParam: JET_API_PTR,
    pub sz: *const WCHAR,
    pub err: JET_ERR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_RETRIEVECOLUMN {
    pub columnid: JET_COLUMNID,
    pub pvData: *mut ::std::os::raw::c_void,
    pub cbData: ::std::os::raw::c_ulong,
    pub cbActual: ::std::os::raw::c_ulong,
    pub grbit: JET_GRBIT,
    pub ibLongValue: ::std::os::raw::c_ulong,
    pub itagSequence: ::std::os::raw::c_ulong,
    pub columnidNextTagged: JET_COLUMNID,
    pub err: JET_ERR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_ENUMCOLUMNID {
    pub columnid: JET_COLUMNID,
    pub ctagSequence: ::std::os::raw::c_ulong,
    pub rgtagSequence: *mut ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_ENUMCOLUMNVALUE {
    pub itagSequence: ::std::os::raw::c_ulong,
    pub err: JET_ERR,
    pub cbData: ::std::os::raw::c_ulong,
    pub pvData: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JET_ENUMCOLUMN {
    pub columnid: JET_COLUMNID,
    pub err: JET_ERR,
    pub __bindgen_anon_1: JET_ENUMCOLUMN__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JET_ENUMCOLUMN__bindgen_ty_1 {
    pub __bindgen_anon_1: JET_ENUMCOLUMN__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: JET_ENUMCOLUMN__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_ENUMCOLUMN__bindgen_ty_1__bindgen_ty_1 {
    pub cEnumColumnValue: ::std::os::raw::c_ulong,
    pub rgEnumColumnValue: *mut JET_ENUMCOLUMNVALUE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_ENUMCOLUMN__bindgen_ty_1__bindgen_ty_2 {
    pub cbData: ::std::os::raw::c_ulong,
    pub pvData: *mut ::std::os::raw::c_void,
}
pub type JET_PFNREALLOC = ::std::option::Option<
    unsafe extern "C" fn(
        pvContext: *mut ::std::os::raw::c_void,
        pv: *mut ::std::os::raw::c_void,
        cb: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_RECSIZE {
    pub cbData: ::std::os::raw::c_ulonglong,
    pub cbLongValueData: ::std::os::raw::c_ulonglong,
    pub cbOverhead: ::std::os::raw::c_ulonglong,
    pub cbLongValueOverhead: ::std::os::raw::c_ulonglong,
    pub cNonTaggedColumns: ::std::os::raw::c_ulonglong,
    pub cTaggedColumns: ::std::os::raw::c_ulonglong,
    pub cLongValues: ::std::os::raw::c_ulonglong,
    pub cMultiValues: ::std::os::raw::c_ulonglong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_RECSIZE2 {
    pub cbData: ::std::os::raw::c_ulonglong,
    pub cbLongValueData: ::std::os::raw::c_ulonglong,
    pub cbOverhead: ::std::os::raw::c_ulonglong,
    pub cbLongValueOverhead: ::std::os::raw::c_ulonglong,
    pub cNonTaggedColumns: ::std::os::raw::c_ulonglong,
    pub cTaggedColumns: ::std::os::raw::c_ulonglong,
    pub cLongValues: ::std::os::raw::c_ulonglong,
    pub cMultiValues: ::std::os::raw::c_ulonglong,
    pub cCompressedColumns: ::std::os::raw::c_ulonglong,
    pub cbDataCompressed: ::std::os::raw::c_ulonglong,
    pub cbLongValueDataCompressed: ::std::os::raw::c_ulonglong,
}
extern "C" {
    pub fn JetInit(pinstance: *mut JET_INSTANCE) -> JET_ERR;
}
extern "C" {
    pub fn JetInit2(pinstance: *mut JET_INSTANCE, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetInit3A(
        pinstance: *mut JET_INSTANCE,
        prstInfo: *mut JET_RSTINFO_A,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetInit3W(
        pinstance: *mut JET_INSTANCE,
        prstInfo: *mut JET_RSTINFO_W,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateInstanceA(pinstance: *mut JET_INSTANCE, szInstanceName: JET_PCSTR) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateInstanceW(pinstance: *mut JET_INSTANCE, szInstanceName: JET_PCWSTR) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateInstance2A(
        pinstance: *mut JET_INSTANCE,
        szInstanceName: JET_PCSTR,
        szDisplayName: JET_PCSTR,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateInstance2W(
        pinstance: *mut JET_INSTANCE,
        szInstanceName: JET_PCWSTR,
        szDisplayName: JET_PCWSTR,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetInstanceMiscInfo(
        instance: JET_INSTANCE,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetTerm(instance: JET_INSTANCE) -> JET_ERR;
}
extern "C" {
    pub fn JetTerm2(instance: JET_INSTANCE, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetStopService() -> JET_ERR;
}
extern "C" {
    pub fn JetStopServiceInstance(instance: JET_INSTANCE) -> JET_ERR;
}
extern "C" {
    pub fn JetStopServiceInstance2(instance: JET_INSTANCE, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetStopBackup() -> JET_ERR;
}
extern "C" {
    pub fn JetStopBackupInstance(instance: JET_INSTANCE) -> JET_ERR;
}
extern "C" {
    pub fn JetSetSystemParameterA(
        pinstance: *mut JET_INSTANCE,
        sesid: JET_SESID,
        paramid: ::std::os::raw::c_ulong,
        lParam: JET_API_PTR,
        szParam: JET_PCSTR,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetSystemParameterW(
        pinstance: *mut JET_INSTANCE,
        sesid: JET_SESID,
        paramid: ::std::os::raw::c_ulong,
        lParam: JET_API_PTR,
        szParam: JET_PCWSTR,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetSystemParameterA(
        instance: JET_INSTANCE,
        sesid: JET_SESID,
        paramid: ::std::os::raw::c_ulong,
        plParam: *mut JET_API_PTR,
        szParam: JET_PSTR,
        cbMax: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetSystemParameterW(
        instance: JET_INSTANCE,
        sesid: JET_SESID,
        paramid: ::std::os::raw::c_ulong,
        plParam: *mut JET_API_PTR,
        szParam: JET_PWSTR,
        cbMax: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetEnableMultiInstanceA(
        psetsysparam: *mut JET_SETSYSPARAM_A,
        csetsysparam: ::std::os::raw::c_ulong,
        pcsetsucceed: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetEnableMultiInstanceW(
        psetsysparam: *mut JET_SETSYSPARAM_W,
        csetsysparam: ::std::os::raw::c_ulong,
        pcsetsucceed: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetThreadStats(
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetBeginSessionA(
        instance: JET_INSTANCE,
        psesid: *mut JET_SESID,
        szUserName: JET_PCSTR,
        szPassword: JET_PCSTR,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetBeginSessionW(
        instance: JET_INSTANCE,
        psesid: *mut JET_SESID,
        szUserName: JET_PCWSTR,
        szPassword: JET_PCWSTR,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDupSession(sesid: JET_SESID, psesid: *mut JET_SESID) -> JET_ERR;
}
extern "C" {
    pub fn JetEndSession(sesid: JET_SESID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetGetVersion(sesid: JET_SESID, pwVersion: *mut ::std::os::raw::c_ulong) -> JET_ERR;
}
extern "C" {
    pub fn JetIdle(sesid: JET_SESID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateDatabaseA(
        sesid: JET_SESID,
        szFilename: JET_PCSTR,
        szConnect: JET_PCSTR,
        pdbid: *mut JET_DBID,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateDatabaseW(
        sesid: JET_SESID,
        szFilename: JET_PCWSTR,
        szConnect: JET_PCWSTR,
        pdbid: *mut JET_DBID,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateDatabase2A(
        sesid: JET_SESID,
        szFilename: JET_PCSTR,
        cpgDatabaseSizeMax: ::std::os::raw::c_ulong,
        pdbid: *mut JET_DBID,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateDatabase2W(
        sesid: JET_SESID,
        szFilename: JET_PCWSTR,
        cpgDatabaseSizeMax: ::std::os::raw::c_ulong,
        pdbid: *mut JET_DBID,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetAttachDatabaseA(sesid: JET_SESID, szFilename: JET_PCSTR, grbit: JET_GRBIT)
        -> JET_ERR;
}
extern "C" {
    pub fn JetAttachDatabaseW(
        sesid: JET_SESID,
        szFilename: JET_PCWSTR,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetAttachDatabase2A(
        sesid: JET_SESID,
        szFilename: JET_PCSTR,
        cpgDatabaseSizeMax: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetAttachDatabase2W(
        sesid: JET_SESID,
        szFilename: JET_PCWSTR,
        cpgDatabaseSizeMax: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDetachDatabaseA(sesid: JET_SESID, szFilename: JET_PCSTR) -> JET_ERR;
}
extern "C" {
    pub fn JetDetachDatabaseW(sesid: JET_SESID, szFilename: JET_PCWSTR) -> JET_ERR;
}
extern "C" {
    pub fn JetDetachDatabase2A(
        sesid: JET_SESID,
        szFilename: JET_PCSTR,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDetachDatabase2W(
        sesid: JET_SESID,
        szFilename: JET_PCWSTR,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetObjectInfoA(
        sesid: JET_SESID,
        dbid: JET_DBID,
        objtyp: JET_OBJTYP,
        szContainerName: JET_PCSTR,
        szObjectName: JET_PCSTR,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetObjectInfoW(
        sesid: JET_SESID,
        dbid: JET_DBID,
        objtyp: JET_OBJTYP,
        szContainerName: JET_PCWSTR,
        szObjectName: JET_PCWSTR,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetTableInfoA(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetTableInfoW(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateTableA(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCSTR,
        lPages: ::std::os::raw::c_ulong,
        lDensity: ::std::os::raw::c_ulong,
        ptableid: *mut JET_TABLEID,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateTableW(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCWSTR,
        lPages: ::std::os::raw::c_ulong,
        lDensity: ::std::os::raw::c_ulong,
        ptableid: *mut JET_TABLEID,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateTableColumnIndexA(
        sesid: JET_SESID,
        dbid: JET_DBID,
        ptablecreate: *mut JET_TABLECREATE_A,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateTableColumnIndexW(
        sesid: JET_SESID,
        dbid: JET_DBID,
        ptablecreate: *mut JET_TABLECREATE_W,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateTableColumnIndex2A(
        sesid: JET_SESID,
        dbid: JET_DBID,
        ptablecreate: *mut JET_TABLECREATE2_A,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateTableColumnIndex2W(
        sesid: JET_SESID,
        dbid: JET_DBID,
        ptablecreate: *mut JET_TABLECREATE2_W,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateTableColumnIndex3A(
        sesid: JET_SESID,
        dbid: JET_DBID,
        ptablecreate: *mut JET_TABLECREATE3_A,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateTableColumnIndex3W(
        sesid: JET_SESID,
        dbid: JET_DBID,
        ptablecreate: *mut JET_TABLECREATE3_W,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateTableColumnIndex4A(
        sesid: JET_SESID,
        dbid: JET_DBID,
        ptablecreate: *mut JET_TABLECREATE4_A,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateTableColumnIndex4W(
        sesid: JET_SESID,
        dbid: JET_DBID,
        ptablecreate: *mut JET_TABLECREATE4_W,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDeleteTableA(sesid: JET_SESID, dbid: JET_DBID, szTableName: JET_PCSTR) -> JET_ERR;
}
extern "C" {
    pub fn JetDeleteTableW(sesid: JET_SESID, dbid: JET_DBID, szTableName: JET_PCWSTR) -> JET_ERR;
}
extern "C" {
    pub fn JetRenameTableA(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szName: JET_PCSTR,
        szNameNew: JET_PCSTR,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetRenameTableW(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szName: JET_PCWSTR,
        szNameNew: JET_PCWSTR,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetTableColumnInfoA(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szColumnName: JET_PCSTR,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetTableColumnInfoW(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szColumnName: JET_PCWSTR,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetColumnInfoA(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCSTR,
        pColumnNameOrId: JET_PCSTR,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetColumnInfoW(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCWSTR,
        pwColumnNameOrId: JET_PCWSTR,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetAddColumnA(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szColumnName: JET_PCSTR,
        pcolumndef: *const JET_COLUMNDEF,
        pvDefault: *const ::std::os::raw::c_void,
        cbDefault: ::std::os::raw::c_ulong,
        pcolumnid: *mut JET_COLUMNID,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetAddColumnW(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szColumnName: JET_PCWSTR,
        pcolumndef: *const JET_COLUMNDEF,
        pvDefault: *const ::std::os::raw::c_void,
        cbDefault: ::std::os::raw::c_ulong,
        pcolumnid: *mut JET_COLUMNID,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDeleteColumnA(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szColumnName: JET_PCSTR,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDeleteColumnW(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szColumnName: JET_PCWSTR,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDeleteColumn2A(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szColumnName: JET_PCSTR,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDeleteColumn2W(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szColumnName: JET_PCWSTR,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetRenameColumnA(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szName: JET_PCSTR,
        szNameNew: JET_PCSTR,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetRenameColumnW(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szName: JET_PCWSTR,
        szNameNew: JET_PCWSTR,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetColumnDefaultValueA(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCSTR,
        szColumnName: JET_PCSTR,
        pvData: *const ::std::os::raw::c_void,
        cbData: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetColumnDefaultValueW(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCWSTR,
        szColumnName: JET_PCWSTR,
        pvData: *const ::std::os::raw::c_void,
        cbData: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetTableIndexInfoA(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCSTR,
        pvResult: *mut ::std::os::raw::c_void,
        cbResult: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetTableIndexInfoW(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCWSTR,
        pvResult: *mut ::std::os::raw::c_void,
        cbResult: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetIndexInfoA(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCSTR,
        szIndexName: JET_PCSTR,
        pvResult: *mut ::std::os::raw::c_void,
        cbResult: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetIndexInfoW(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCWSTR,
        szIndexName: JET_PCWSTR,
        pvResult: *mut ::std::os::raw::c_void,
        cbResult: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateIndexA(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCSTR,
        grbit: JET_GRBIT,
        szKey: *const ::std::os::raw::c_char,
        cbKey: ::std::os::raw::c_ulong,
        lDensity: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateIndexW(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCWSTR,
        grbit: JET_GRBIT,
        szKey: *const WCHAR,
        cbKey: ::std::os::raw::c_ulong,
        lDensity: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateIndex2A(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pindexcreate: *mut JET_INDEXCREATE_A,
        cIndexCreate: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateIndex2W(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pindexcreate: *mut JET_INDEXCREATE_W,
        cIndexCreate: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateIndex3A(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pindexcreate: *mut JET_INDEXCREATE2_A,
        cIndexCreate: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateIndex3W(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pindexcreate: *mut JET_INDEXCREATE2_W,
        cIndexCreate: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateIndex4A(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pindexcreate: *mut JET_INDEXCREATE3_A,
        cIndexCreate: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCreateIndex4W(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pindexcreate: *mut JET_INDEXCREATE3_W,
        cIndexCreate: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDeleteIndexA(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCSTR,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDeleteIndexW(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCWSTR,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetBeginTransaction(sesid: JET_SESID) -> JET_ERR;
}
extern "C" {
    pub fn JetBeginTransaction2(sesid: JET_SESID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetBeginTransaction3(
        sesid: JET_SESID,
        trxid: ::std::os::raw::c_longlong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCommitTransaction(sesid: JET_SESID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetCommitTransaction2(
        sesid: JET_SESID,
        grbit: JET_GRBIT,
        cmsecDurableCommit: ::std::os::raw::c_ulong,
        pCommitId: *mut JET_COMMIT_ID,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetRollback(sesid: JET_SESID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetGetDatabaseInfoA(
        sesid: JET_SESID,
        dbid: JET_DBID,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetDatabaseInfoW(
        sesid: JET_SESID,
        dbid: JET_DBID,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetDatabaseFileInfoA(
        szDatabaseName: JET_PCSTR,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetDatabaseFileInfoW(
        szDatabaseName: JET_PCWSTR,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenDatabaseA(
        sesid: JET_SESID,
        szFilename: JET_PCSTR,
        szConnect: JET_PCSTR,
        pdbid: *mut JET_DBID,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenDatabaseW(
        sesid: JET_SESID,
        szFilename: JET_PCWSTR,
        szConnect: JET_PCWSTR,
        pdbid: *mut JET_DBID,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCloseDatabase(sesid: JET_SESID, dbid: JET_DBID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenTableA(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCSTR,
        pvParameters: *const ::std::os::raw::c_void,
        cbParameters: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
        ptableid: *mut JET_TABLEID,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenTableW(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCWSTR,
        pvParameters: *const ::std::os::raw::c_void,
        cbParameters: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
        ptableid: *mut JET_TABLEID,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetTableSequential(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetResetTableSequential(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCloseTable(sesid: JET_SESID, tableid: JET_TABLEID) -> JET_ERR;
}
extern "C" {
    pub fn JetDelete(sesid: JET_SESID, tableid: JET_TABLEID) -> JET_ERR;
}
extern "C" {
    pub fn JetUpdate(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pvBookmark: *mut ::std::os::raw::c_void,
        cbBookmark: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetUpdate2(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pvBookmark: *mut ::std::os::raw::c_void,
        cbBookmark: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetEscrowUpdate(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        columnid: JET_COLUMNID,
        pv: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        pvOld: *mut ::std::os::raw::c_void,
        cbOldMax: ::std::os::raw::c_ulong,
        pcbOldActual: *mut ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetRetrieveColumn(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        columnid: JET_COLUMNID,
        pvData: *mut ::std::os::raw::c_void,
        cbData: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
        pretinfo: *mut JET_RETINFO,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetRetrieveColumns(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pretrievecolumn: *mut JET_RETRIEVECOLUMN,
        cretrievecolumn: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetEnumerateColumns(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        cEnumColumnId: ::std::os::raw::c_ulong,
        rgEnumColumnId: *mut JET_ENUMCOLUMNID,
        pcEnumColumn: *mut ::std::os::raw::c_ulong,
        prgEnumColumn: *mut *mut JET_ENUMCOLUMN,
        pfnRealloc: JET_PFNREALLOC,
        pvReallocContext: *mut ::std::os::raw::c_void,
        cbDataMost: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetRecordSize(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        precsize: *mut JET_RECSIZE,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetRecordSize2(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        precsize: *mut JET_RECSIZE2,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetColumn(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        columnid: JET_COLUMNID,
        pvData: *const ::std::os::raw::c_void,
        cbData: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
        psetinfo: *mut JET_SETINFO,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetColumns(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        psetcolumn: *mut JET_SETCOLUMN,
        csetcolumn: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetPrepareUpdate(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        prep: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetRecordPosition(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        precpos: *mut JET_RECPOS,
        cbRecpos: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGotoPosition(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        precpos: *mut JET_RECPOS,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetCursorInfo(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDupCursor(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        ptableid: *mut JET_TABLEID,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetCurrentIndexA(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PSTR,
        cbIndexName: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetCurrentIndexW(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PWSTR,
        cbIndexName: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetCurrentIndexA(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCSTR,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetCurrentIndexW(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCWSTR,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetCurrentIndex2A(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCSTR,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetCurrentIndex2W(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCWSTR,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetCurrentIndex3A(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCSTR,
        grbit: JET_GRBIT,
        itagSequence: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetCurrentIndex3W(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCWSTR,
        grbit: JET_GRBIT,
        itagSequence: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetCurrentIndex4A(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCSTR,
        pindexid: *mut JET_INDEXID,
        grbit: JET_GRBIT,
        itagSequence: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetCurrentIndex4W(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        szIndexName: JET_PCWSTR,
        pindexid: *mut JET_INDEXID,
        grbit: JET_GRBIT,
        itagSequence: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetMove(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        cRow: ::std::os::raw::c_long,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetCursorFilter(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        rgColumnFilters: *mut JET_INDEX_COLUMN,
        cColumnFilters: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetLock(sesid: JET_SESID, tableid: JET_TABLEID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetMakeKey(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pvData: *const ::std::os::raw::c_void,
        cbData: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSeek(sesid: JET_SESID, tableid: JET_TABLEID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetPrereadKeys(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        rgpvKeys: *mut *const ::std::os::raw::c_void,
        rgcbKeys: *const ::std::os::raw::c_ulong,
        ckeys: ::std::os::raw::c_long,
        pckeysPreread: *mut ::std::os::raw::c_long,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetPrereadIndexRanges(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        rgIndexRanges: *const JET_INDEX_RANGE,
        cIndexRanges: ::std::os::raw::c_ulong,
        pcRangesPreread: *mut ::std::os::raw::c_ulong,
        rgcolumnidPreread: *const JET_COLUMNID,
        ccolumnidPreread: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetBookmark(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pvBookmark: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetSecondaryIndexBookmark(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pvSecondaryKey: *mut ::std::os::raw::c_void,
        cbSecondaryKeyMax: ::std::os::raw::c_ulong,
        pcbSecondaryKeyActual: *mut ::std::os::raw::c_ulong,
        pvPrimaryBookmark: *mut ::std::os::raw::c_void,
        cbPrimaryBookmarkMax: ::std::os::raw::c_ulong,
        pcbPrimaryBookmarkActual: *mut ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCompactA(
        sesid: JET_SESID,
        szDatabaseSrc: JET_PCSTR,
        szDatabaseDest: JET_PCSTR,
        pfnStatus: JET_PFNSTATUS,
        pconvert: *mut JET_CONVERT_A,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCompactW(
        sesid: JET_SESID,
        szDatabaseSrc: JET_PCWSTR,
        szDatabaseDest: JET_PCWSTR,
        pfnStatus: JET_PFNSTATUS,
        pconvert: *mut JET_CONVERT_W,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDefragmentA(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCSTR,
        pcPasses: *mut ::std::os::raw::c_ulong,
        pcSeconds: *mut ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDefragmentW(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCWSTR,
        pcPasses: *mut ::std::os::raw::c_ulong,
        pcSeconds: *mut ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDefragment2A(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCSTR,
        pcPasses: *mut ::std::os::raw::c_ulong,
        pcSeconds: *mut ::std::os::raw::c_ulong,
        callback: JET_CALLBACK,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDefragment2W(
        sesid: JET_SESID,
        dbid: JET_DBID,
        szTableName: JET_PCWSTR,
        pcPasses: *mut ::std::os::raw::c_ulong,
        pcSeconds: *mut ::std::os::raw::c_ulong,
        callback: JET_CALLBACK,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDefragment3A(
        sesid: JET_SESID,
        szDatabaseName: JET_PCSTR,
        szTableName: JET_PCSTR,
        pcPasses: *mut ::std::os::raw::c_ulong,
        pcSeconds: *mut ::std::os::raw::c_ulong,
        callback: JET_CALLBACK,
        pvContext: *mut ::std::os::raw::c_void,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetDefragment3W(
        sesid: JET_SESID,
        szDatabaseName: JET_PCWSTR,
        szTableName: JET_PCWSTR,
        pcPasses: *mut ::std::os::raw::c_ulong,
        pcSeconds: *mut ::std::os::raw::c_ulong,
        callback: JET_CALLBACK,
        pvContext: *mut ::std::os::raw::c_void,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetDatabaseSizeA(
        sesid: JET_SESID,
        szDatabaseName: JET_PCSTR,
        cpg: ::std::os::raw::c_ulong,
        pcpgReal: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetDatabaseSizeW(
        sesid: JET_SESID,
        szDatabaseName: JET_PCWSTR,
        cpg: ::std::os::raw::c_ulong,
        pcpgReal: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGrowDatabase(
        sesid: JET_SESID,
        dbid: JET_DBID,
        cpg: ::std::os::raw::c_ulong,
        pcpgReal: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetResizeDatabase(
        sesid: JET_SESID,
        dbid: JET_DBID,
        cpgTarget: ::std::os::raw::c_ulong,
        pcpgActual: *mut ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetSessionContext(sesid: JET_SESID, ulContext: JET_API_PTR) -> JET_ERR;
}
extern "C" {
    pub fn JetResetSessionContext(sesid: JET_SESID) -> JET_ERR;
}
extern "C" {
    pub fn JetGotoBookmark(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pvBookmark: *mut ::std::os::raw::c_void,
        cbBookmark: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGotoSecondaryIndexBookmark(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pvSecondaryKey: *mut ::std::os::raw::c_void,
        cbSecondaryKey: ::std::os::raw::c_ulong,
        pvPrimaryBookmark: *mut ::std::os::raw::c_void,
        cbPrimaryBookmark: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetIntersectIndexes(
        sesid: JET_SESID,
        rgindexrange: *mut JET_INDEXRANGE,
        cindexrange: ::std::os::raw::c_ulong,
        precordlist: *mut JET_RECORDLIST,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetComputeStats(sesid: JET_SESID, tableid: JET_TABLEID) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenTempTable(
        sesid: JET_SESID,
        prgcolumndef: *const JET_COLUMNDEF,
        ccolumn: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
        ptableid: *mut JET_TABLEID,
        prgcolumnid: *mut JET_COLUMNID,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenTempTable2(
        sesid: JET_SESID,
        prgcolumndef: *const JET_COLUMNDEF,
        ccolumn: ::std::os::raw::c_ulong,
        lcid: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
        ptableid: *mut JET_TABLEID,
        prgcolumnid: *mut JET_COLUMNID,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenTempTable3(
        sesid: JET_SESID,
        prgcolumndef: *const JET_COLUMNDEF,
        ccolumn: ::std::os::raw::c_ulong,
        pidxunicode: *mut JET_UNICODEINDEX,
        grbit: JET_GRBIT,
        ptableid: *mut JET_TABLEID,
        prgcolumnid: *mut JET_COLUMNID,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenTemporaryTable(
        sesid: JET_SESID,
        popentemporarytable: *mut JET_OPENTEMPORARYTABLE,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenTemporaryTable2(
        sesid: JET_SESID,
        popentemporarytable: *mut JET_OPENTEMPORARYTABLE2,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetBackupA(
        szBackupPath: JET_PCSTR,
        grbit: JET_GRBIT,
        pfnStatus: JET_PFNSTATUS,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetBackupW(
        szBackupPath: JET_PCWSTR,
        grbit: JET_GRBIT,
        pfnStatus: JET_PFNSTATUS,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetBackupInstanceA(
        instance: JET_INSTANCE,
        szBackupPath: JET_PCSTR,
        grbit: JET_GRBIT,
        pfnStatus: JET_PFNSTATUS,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetBackupInstanceW(
        instance: JET_INSTANCE,
        szBackupPath: JET_PCWSTR,
        grbit: JET_GRBIT,
        pfnStatus: JET_PFNSTATUS,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetRestoreA(szSource: JET_PCSTR, pfn: JET_PFNSTATUS) -> JET_ERR;
}
extern "C" {
    pub fn JetRestoreW(szSource: JET_PCWSTR, pfn: JET_PFNSTATUS) -> JET_ERR;
}
extern "C" {
    pub fn JetRestore2A(sz: JET_PCSTR, szDest: JET_PCSTR, pfn: JET_PFNSTATUS) -> JET_ERR;
}
extern "C" {
    pub fn JetRestore2W(sz: JET_PCWSTR, szDest: JET_PCWSTR, pfn: JET_PFNSTATUS) -> JET_ERR;
}
extern "C" {
    pub fn JetRestoreInstanceA(
        instance: JET_INSTANCE,
        sz: JET_PCSTR,
        szDest: JET_PCSTR,
        pfn: JET_PFNSTATUS,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetRestoreInstanceW(
        instance: JET_INSTANCE,
        sz: JET_PCWSTR,
        szDest: JET_PCWSTR,
        pfn: JET_PFNSTATUS,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetIndexRange(sesid: JET_SESID, tableidSrc: JET_TABLEID, grbit: JET_GRBIT)
        -> JET_ERR;
}
extern "C" {
    pub fn JetIndexRecordCount(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pcrec: *mut ::std::os::raw::c_ulong,
        crecMax: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetRetrieveKey(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pvKey: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetBeginExternalBackup(grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetBeginExternalBackupInstance(instance: JET_INSTANCE, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetGetAttachInfoA(
        szzDatabases: JET_PSTR,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetAttachInfoW(
        wszzDatabases: JET_PWSTR,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetAttachInfoInstanceA(
        instance: JET_INSTANCE,
        szzDatabases: JET_PSTR,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetAttachInfoInstanceW(
        instance: JET_INSTANCE,
        szzDatabases: JET_PWSTR,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenFileA(
        szFileName: JET_PCSTR,
        phfFile: *mut JET_HANDLE,
        pulFileSizeLow: *mut ::std::os::raw::c_ulong,
        pulFileSizeHigh: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenFileW(
        szFileName: JET_PCWSTR,
        phfFile: *mut JET_HANDLE,
        pulFileSizeLow: *mut ::std::os::raw::c_ulong,
        pulFileSizeHigh: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenFileInstanceA(
        instance: JET_INSTANCE,
        szFileName: JET_PCSTR,
        phfFile: *mut JET_HANDLE,
        pulFileSizeLow: *mut ::std::os::raw::c_ulong,
        pulFileSizeHigh: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOpenFileInstanceW(
        instance: JET_INSTANCE,
        szFileName: JET_PCWSTR,
        phfFile: *mut JET_HANDLE,
        pulFileSizeLow: *mut ::std::os::raw::c_ulong,
        pulFileSizeHigh: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetReadFile(
        hfFile: JET_HANDLE,
        pv: *mut ::std::os::raw::c_void,
        cb: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetReadFileInstance(
        instance: JET_INSTANCE,
        hfFile: JET_HANDLE,
        pv: *mut ::std::os::raw::c_void,
        cb: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetCloseFile(hfFile: JET_HANDLE) -> JET_ERR;
}
extern "C" {
    pub fn JetCloseFileInstance(instance: JET_INSTANCE, hfFile: JET_HANDLE) -> JET_ERR;
}
extern "C" {
    pub fn JetGetLogInfoA(
        szzLogs: JET_PSTR,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetLogInfoW(
        szzLogs: JET_PWSTR,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetLogInfoInstanceA(
        instance: JET_INSTANCE,
        szzLogs: JET_PSTR,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetLogInfoInstanceW(
        instance: JET_INSTANCE,
        wszzLogs: JET_PWSTR,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_LOGINFO_A {
    pub cbSize: ::std::os::raw::c_ulong,
    pub ulGenLow: ::std::os::raw::c_ulong,
    pub ulGenHigh: ::std::os::raw::c_ulong,
    pub szBaseName: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JET_LOGINFO_W {
    pub cbSize: ::std::os::raw::c_ulong,
    pub ulGenLow: ::std::os::raw::c_ulong,
    pub ulGenHigh: ::std::os::raw::c_ulong,
    pub szBaseName: [WCHAR; 4usize],
}
extern "C" {
    pub fn JetGetLogInfoInstance2A(
        instance: JET_INSTANCE,
        szzLogs: JET_PSTR,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
        pLogInfo: *mut JET_LOGINFO_A,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetLogInfoInstance2W(
        instance: JET_INSTANCE,
        wszzLogs: JET_PWSTR,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
        pLogInfo: *mut JET_LOGINFO_W,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetTruncateLogInfoInstanceA(
        instance: JET_INSTANCE,
        szzLogs: JET_PSTR,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetTruncateLogInfoInstanceW(
        instance: JET_INSTANCE,
        wszzLogs: JET_PWSTR,
        cbMax: ::std::os::raw::c_ulong,
        pcbActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetTruncateLog() -> JET_ERR;
}
extern "C" {
    pub fn JetTruncateLogInstance(instance: JET_INSTANCE) -> JET_ERR;
}
extern "C" {
    pub fn JetEndExternalBackup() -> JET_ERR;
}
extern "C" {
    pub fn JetEndExternalBackupInstance(instance: JET_INSTANCE) -> JET_ERR;
}
extern "C" {
    pub fn JetEndExternalBackupInstance2(instance: JET_INSTANCE, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetExternalRestoreA(
        szCheckpointFilePath: JET_PSTR,
        szLogPath: JET_PSTR,
        rgrstmap: *mut JET_RSTMAP_A,
        crstfilemap: ::std::os::raw::c_long,
        szBackupLogPath: JET_PSTR,
        genLow: ::std::os::raw::c_long,
        genHigh: ::std::os::raw::c_long,
        pfn: JET_PFNSTATUS,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetExternalRestoreW(
        szCheckpointFilePath: JET_PWSTR,
        szLogPath: JET_PWSTR,
        rgrstmap: *mut JET_RSTMAP_W,
        crstfilemap: ::std::os::raw::c_long,
        szBackupLogPath: JET_PWSTR,
        genLow: ::std::os::raw::c_long,
        genHigh: ::std::os::raw::c_long,
        pfn: JET_PFNSTATUS,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetExternalRestore2A(
        szCheckpointFilePath: JET_PSTR,
        szLogPath: JET_PSTR,
        rgrstmap: *mut JET_RSTMAP_A,
        crstfilemap: ::std::os::raw::c_long,
        szBackupLogPath: JET_PSTR,
        pLogInfo: *mut JET_LOGINFO_A,
        szTargetInstanceName: JET_PSTR,
        szTargetInstanceLogPath: JET_PSTR,
        szTargetInstanceCheckpointPath: JET_PSTR,
        pfn: JET_PFNSTATUS,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetExternalRestore2W(
        szCheckpointFilePath: JET_PWSTR,
        szLogPath: JET_PWSTR,
        rgrstmap: *mut JET_RSTMAP_W,
        crstfilemap: ::std::os::raw::c_long,
        szBackupLogPath: JET_PWSTR,
        pLogInfo: *mut JET_LOGINFO_W,
        szTargetInstanceName: JET_PWSTR,
        szTargetInstanceLogPath: JET_PWSTR,
        szTargetInstanceCheckpointPath: JET_PWSTR,
        pfn: JET_PFNSTATUS,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetRegisterCallback(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        cbtyp: JET_CBTYP,
        pCallback: JET_CALLBACK,
        pvContext: *mut ::std::os::raw::c_void,
        phCallbackId: *mut JET_HANDLE,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetUnregisterCallback(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        cbtyp: JET_CBTYP,
        hCallbackId: JET_HANDLE,
    ) -> JET_ERR;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JET_INSTANCE_INFO_A {
    pub hInstanceId: JET_INSTANCE,
    pub szInstanceName: *mut ::std::os::raw::c_char,
    pub cDatabases: JET_API_PTR,
    pub szDatabaseFileName: *mut *mut ::std::os::raw::c_char,
    pub szDatabaseDisplayName: *mut *mut ::std::os::raw::c_char,
    pub szDatabaseSLVFileName_Obsolete: *mut *mut ::std::os::raw::c_char,
}
pub type JET_INSTANCE_INFO_A = _JET_INSTANCE_INFO_A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JET_INSTANCE_INFO_W {
    pub hInstanceId: JET_INSTANCE,
    pub szInstanceName: *mut WCHAR,
    pub cDatabases: JET_API_PTR,
    pub szDatabaseFileName: *mut *mut WCHAR,
    pub szDatabaseDisplayName: *mut *mut WCHAR,
    pub szDatabaseSLVFileName_Obsolete: *mut *mut WCHAR,
}
pub type JET_INSTANCE_INFO_W = _JET_INSTANCE_INFO_W;
extern "C" {
    pub fn JetGetInstanceInfoA(
        pcInstanceInfo: *mut ::std::os::raw::c_ulong,
        paInstanceInfo: *mut *mut JET_INSTANCE_INFO_A,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetInstanceInfoW(
        pcInstanceInfo: *mut ::std::os::raw::c_ulong,
        paInstanceInfo: *mut *mut JET_INSTANCE_INFO_W,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetFreeBuffer(pbBuf: *mut ::std::os::raw::c_char) -> JET_ERR;
}
extern "C" {
    pub fn JetSetLS(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        ls: JET_LS,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetLS(
        sesid: JET_SESID,
        tableid: JET_TABLEID,
        pls: *mut JET_LS,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
pub type JET_OSSNAPID = JET_API_PTR;
extern "C" {
    pub fn JetOSSnapshotPrepare(psnapId: *mut JET_OSSNAPID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetOSSnapshotPrepareInstance(
        snapId: JET_OSSNAPID,
        instance: JET_INSTANCE,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOSSnapshotFreezeA(
        snapId: JET_OSSNAPID,
        pcInstanceInfo: *mut ::std::os::raw::c_ulong,
        paInstanceInfo: *mut *mut JET_INSTANCE_INFO_A,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOSSnapshotFreezeW(
        snapId: JET_OSSNAPID,
        pcInstanceInfo: *mut ::std::os::raw::c_ulong,
        paInstanceInfo: *mut *mut JET_INSTANCE_INFO_W,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOSSnapshotThaw(snapId: JET_OSSNAPID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetOSSnapshotAbort(snapId: JET_OSSNAPID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetOSSnapshotTruncateLog(snapId: JET_OSSNAPID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetOSSnapshotTruncateLogInstance(
        snapId: JET_OSSNAPID,
        instance: JET_INSTANCE,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOSSnapshotGetFreezeInfoA(
        snapId: JET_OSSNAPID,
        pcInstanceInfo: *mut ::std::os::raw::c_ulong,
        paInstanceInfo: *mut *mut JET_INSTANCE_INFO_A,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOSSnapshotGetFreezeInfoW(
        snapId: JET_OSSNAPID,
        pcInstanceInfo: *mut ::std::os::raw::c_ulong,
        paInstanceInfo: *mut *mut JET_INSTANCE_INFO_W,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetOSSnapshotEnd(snapId: JET_OSSNAPID, grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetConfigureProcessForCrashDump(grbit: JET_GRBIT) -> JET_ERR;
}
extern "C" {
    pub fn JetGetErrorInfoW(
        pvContext: *mut ::std::os::raw::c_void,
        pvResult: *mut ::std::os::raw::c_void,
        cbMax: ::std::os::raw::c_ulong,
        InfoLevel: ::std::os::raw::c_ulong,
        grbit: JET_GRBIT,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetSetSessionParameter(
        sesid: JET_SESID,
        sesparamid: ::std::os::raw::c_ulong,
        pvParam: *mut ::std::os::raw::c_void,
        cbParam: ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
extern "C" {
    pub fn JetGetSessionParameter(
        sesid: JET_SESID,
        sesparamid: ::std::os::raw::c_ulong,
        pvParam: *mut ::std::os::raw::c_void,
        cbParamMax: ::std::os::raw::c_ulong,
        pcbParamActual: *mut ::std::os::raw::c_ulong,
    ) -> JET_ERR;
}
